name: Cleanup Workflow Runs

on:
  schedule:
    # Runs every 2 days at midnight UTC
    - cron: '0 0 */2 * *'
  workflow_dispatch:

permissions:
  actions: write
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Delete cancelled and successful version checks
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            // 1) Delete all cancelled runs
            const cancelled = await github.rest.actions.listWorkflowRunsForRepo({
              owner, 
              repo,
              status: 'cancelled',
              per_page: 100
            });
            for (const run of cancelled.data.workflow_runs) {
              console.log(`Deleting cancelled run ${run.id} (${run.name})`);
              await github.rest.actions.deleteWorkflowRun({
                owner,
                repo,
                run_id: run.id
              });
            }

            // 1.5) Delete all skipped runs
            console.log('Looking for skipped runs to delete…');
            const skipped = await github.rest.actions.listWorkflowRunsForRepo({
              owner, 
              repo,
              status: 'completed',
              per_page: 100
            });
            for (const run of skipped.data.workflow_runs) {
              if (run.conclusion === 'skipped') {
                console.log(`Deleting skipped run ${run.id} (${run.name})`);
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
              }
            }

            // 2) Delete all successful "Version Validation" runs
            console.log('Looking for successful version‐validation runs to delete…');
            const completed = await github.rest.actions.listWorkflowRunsForRepo({
              owner, 
              repo,
              status: 'completed',
              per_page: 100
            });
            for (const run of completed.data.workflow_runs) {
              if (run.name === 'Version Validation' && run.conclusion === 'success') {
                console.log(`Deleting successful version check run ${run.id}`);
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
              }
            }

            // 3) Delete all successful "Cleanup Workflow Runs" runs (this workflow itself)
            console.log('Looking for successful cleanup workflow runs to delete…');
            for (const run of completed.data.workflow_runs) {
              if (run.name.includes('Cleanup') && run.conclusion === 'success') {
                console.log(`Deleting successful cleanup workflow run ${run.id}`);
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
              }
            }

            // 4) Delete all auto PR creation workflows
            console.log('Looking for auto PR creation workflows to delete…');
            const allRuns = await github.rest.actions.listWorkflowRunsForRepo({
              owner, 
              repo,
              per_page: 100
            });
            for (const run of allRuns.data.workflow_runs) {
              if (run.name === 'Auto PR Creation' || 
                  run.name.includes('Create/Update PR') ||
                  run.name.includes('Auto-PR')) {
                console.log(`Deleting auto PR workflow run ${run.id} (${run.name})`);
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
              }
            }

            // 5) Delete all workflows where commit message contains "Updated "
            console.log('Looking for workflows with "Updated " commit messages to delete…');
            for (const run of allRuns.data.workflow_runs) {
              if (run.head_commit && run.head_commit.message && 
                  run.head_commit.message.includes('Updated ')) {
                console.log(`Deleting workflow run ${run.id} with "Updated " commit: "${run.head_commit.message}"`);
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
              }
            }