name: Generate Changelog

on:
  workflow_call:
    inputs:
      commit_shas:
        description: "Comma-separated list of commit SHAs to include in changelog"
        required: true
        type: string
      release_type:
        description: "Type of release (alpha, beta, production)"
        required: true
        type: string
      version:
        description: "Version number for this release"
        required: true
        type: string
    outputs:
      changelog:
        description: "Generated changelog content"
        value: ${{ jobs.generate.outputs.changelog }}
      changelog_file:
        description: "Path to generated changelog file (for production releases)"
        value: ${{ jobs.generate.outputs.changelog_file }}
    secrets:
      OPENAI_API_KEY:
        required: false
      GH_TOKEN:
        required: true

jobs:
  generate:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.generate.outputs.changelog }}
      changelog_file: ${{ steps.generate.outputs.changelog_file }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog content
        id: generate
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          
          # Parse commit SHAs
          IFS=',' read -ra SHAS <<< "${{ inputs.commit_shas }}"
          
          # Function to get AI summary from commit comments
          get_ai_summary() {
            local commit_shas="$1"
            local all_comments=""
            local commit_list=""
            
            echo "🔍 Processing commits for changelog..." >&2
            
            # Collect commit information and their AI comments
            for sha in $commit_shas; do
              if git cat-file -e "$sha" 2>/dev/null; then
                commit_msg=$(git log --format="%s" -n 1 "$sha" 2>/dev/null || echo "")
                commit_timestamp=$(git log --format="%ad" --date=format:"%Y-%m-%d %H:%M:%S" -n 1 "$sha" 2>/dev/null || echo "")
                echo "Processing commit $sha: $commit_msg ($commit_timestamp)" >&2
                
                # Build simple commit list for display with timestamp
                commit_list="${commit_list}- **${sha:0:7}** ($commit_timestamp): $commit_msg"$'\n'
                
                # Try to get AI-generated commit comments via GitHub API
                ai_comment=""
                if [ -n "$GITHUB_TOKEN" ]; then
                  echo "🤖 Fetching AI comment for commit $sha..." >&2
                  api_comments=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github+json" \
                    "https://api.github.com/repos/${{ github.repository }}/commits/$sha/comments" \
                    | jq -r '.[].body // empty' 2>/dev/null)
                  
                  if [ -n "$api_comments" ] && [ "$api_comments" != "null" ] && [ "$api_comments" != "" ]; then
                    ai_comment="$api_comments"
                    echo "✅ Found AI comment for $sha" >&2
                  else
                    echo "⚠️ No AI comment found for $sha" >&2
                  fi
                fi
                
                # Use AI comment if available for AI processing, otherwise enhance commit message
                if [ -n "$ai_comment" ]; then
                  full_comment="$ai_comment"
                else
                  # Fallback: enhance commit message with file changes
                  if [ "$commit_msg" = "update" ] || [ "$commit_msg" = "Update" ] || [ -z "$commit_msg" ]; then
                    files_changed=$(git diff-tree --no-commit-id --name-only -r "$sha" 2>/dev/null | head -5 | tr '\n' ', ' | sed 's/,$//')
                    if [ -n "$files_changed" ]; then
                      full_comment="Updated files: $files_changed"
                    else
                      full_comment="Minor updates and improvements"
                    fi
                  else
                    full_comment="$commit_msg"
                  fi
                fi
                
                # Build detailed comments for AI processing (with timestamp for context)
                all_comments="${all_comments}- **${sha:0:7}** ($commit_timestamp): $full_comment"$'\n'
              else
                echo "⚠️ Commit $sha not found"
              fi
            done
            
            if [ -z "$all_comments" ]; then
              echo "- Minor updates and improvements"
              return
            fi
            
            echo "📝 Collected commit information with AI comments:" >&2
            echo "$all_comments" >&2
            
            # Since we already have AI-enhanced content, we can either:
            # 1. Use it directly (since it's already AI-processed)
            # 2. Or further summarize it with OpenAI for a higher-level overview
            
            if [ -n "$OPENAI_API_KEY" ]; then
              echo "🤖 Creating high-level summary from AI comments..." >&2
              
              # Initialize changelog_content variable
              changelog_content=""
              
              # Set system prompt based on release type
              case "${{ inputs.release_type }}" in
                "alpha")
                  system_prompt="You are a technical documentation specialist creating changelog entries for a development alpha release of an application named Proxy Smart. Your audience is developers and technical team members who need detailed technical information.\n\nGuidelines for ALPHA releases:\n- Focus on technical implementation details and code changes\n- Include specific changes and technical improvements\n- Use technical terminology and be specific about APIs, endpoints, and architecture\n- Group by: 🔧 Code Changes, 🚀 New Features, ⚡ Performance, 🐛 Bug Fixes, 📚 Documentation\n- Mention specific technical debt addressed or refactoring done\n- Include details about new dependencies, API changes, or breaking changes\n- Keep developer workflow and testing implications in mind"
                  ;;
                "beta")
                  system_prompt="You are a product documentation specialist creating changelog entries for a beta testing release of an application named Proxy Smart. Your audience includes beta testers, QA engineers, and technical product managers who need functional information.\n\nGuidelines for BETA releases:\n- Focus on user-facing features and functionality changes\n- Explain what users can now do differently or better\n- Balance technical accuracy with user-friendly language\n- Group by: 🚀 New Features, ⚡ Improvements, 🐛 Bug Fixes, � Security, ⚠️ Known Issues\n- Highlight testing scenarios and user experience changes\n- Include any configuration or setup changes needed\n- Mention compatibility and integration improvements\n- Call out any features that need specific testing attention"
                  ;;
                "production")
                  system_prompt="You are an expert technical writer creating changelog entries for a production release of an application named Proxy Smart. Your audience includes business stakeholders, healthcare administrators, and end users who need meaningful business value information.\n\nGuidelines for PRODUCTION releases:\n- Focus on business value, user benefits, and real-world impact\n- Write in business-friendly language while maintaining technical accuracy\n- Emphasize healthcare workflow improvements and compliance benefits\n- Group by: 🚀 New Features, ⚡ Improvements, 🐛 Bug Fixes, 🔒 Security, 📋 Compliance\n- Highlight operational benefits, cost savings, or efficiency gains\n- Explain how changes improve patient care or administrative workflows\n- Use clear action verbs and quantify improvements where possible\n- Include any training or change management considerations\n- Highlight any breaking changes or important notices prominently"
                  ;;
                *)
                  system_prompt="You are an expert technical writer creating changelog entries for an application named Proxy Smart. Focus on clear, professional communication of changes and their impact."
                  ;;
              esac
              
              # Create JSON payload with proper escaping
              request_data=$(jq -n \
                --arg model "gpt-5-mini" \
                --arg system_content "$system_prompt" \
                --arg user_content "Create a professional changelog from these commit summaries for an application named Proxy Smart (${{ inputs.release_type }} release). Focus on the appropriate level of detail for this release type:\n\n$all_comments" \
                '{
                  "model": $model,
                  "messages": [
                    {"role": "system", "content": $system_content},
                    {"role": "user", "content": $user_content}
                  ],
                  "max_completion_tokens": 800,
                  "temperature": 0.2
                }')
              
              # Make API call with detailed error reporting
              api_response=$(curl -s -w "\n%{http_code}" -X POST "https://api.openai.com/v1/chat/completions" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d "$request_data" 2>&1)
              
              # Parse response and status code
              http_code=$(echo "$api_response" | tail -n1)
              response_body=$(echo "$api_response" | head -n -1)
              
              echo "🔍 OpenAI API HTTP Status: $http_code" >&2
              
              if [ "$http_code" = "200" ]; then
                changelog_content=$(echo "$response_body" | jq -r '.choices[0].message.content // empty' 2>/dev/null)
                if [ -n "$changelog_content" ] && [ "$changelog_content" != "null" ] && [ "$changelog_content" != "" ]; then
                  echo "✅ High-level AI summary generated successfully" >&2
                  # Output AI summary first, then commit list
                  echo "$changelog_content"
                  echo ""
                  echo "## Commit Details"
                  echo "$commit_list"
                  return
                else
                  echo "⚠️ Failed to extract content from API response" >&2
                  echo "Raw response: $response_body" >&2
                  # Fall through to simple commit list
                fi
              else
                echo "⚠️ OpenAI API call failed with status $http_code" >&2
                echo "Error response: $response_body" >&2
                # Fall through to simple commit list
              fi
              
              # If we reach here, AI summary failed - show simple commit list only
              if [ -z "$changelog_content" ] || [ "$changelog_content" = "null" ] || [ "$changelog_content" = "" ]; then
                echo "OpenAI summarization failed, showing commit list" >&2
                echo "## Commit Details"
                echo "$commit_list"
              fi
            else
              echo "⚠️ No OpenAI API key provided, showing commit list" >&2
              echo "## Commit Details"
              echo "$commit_list"
            fi
          }
          
          # Generate the changelog
          CHANGELOG=$(get_ai_summary "${SHAS[*]}")
          
          # Create changelog file for production releases
          if [ "${{ inputs.release_type }}" = "production" ]; then
            CHANGELOG_FILE="CHANGELOG-${{ inputs.version }}.md"
            cat > "$CHANGELOG_FILE" << EOF
          # Changelog

          ## [v${{ inputs.version }}] - $(date +%Y-%m-%d)

          ### Changes

          $CHANGELOG

          EOF
            echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
          fi
          
          # Output the changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
