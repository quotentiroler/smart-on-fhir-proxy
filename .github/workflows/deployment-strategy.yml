name: Deployment Strategy

on:
  workflow_call:
    inputs:
      deployment_stage:
        description: "Deployment stage: alpha, beta, or production"
        required: true
        type: string
      app_version:
        description: "Version of the application to deploy"
        required: true
        type: string
      source_branch:
        description: "Source branch for deployment"
        required: true
        type: string
    outputs:
      fhir_server_url:
        description: "FHIR server URL after deployment"
        value: ${{ jobs.output-deployment-urls.outputs.fhir_server_url }}
      keycloak_url:
        description: "Keycloak URL after deployment"
        value: ${{ jobs.output-deployment-urls.outputs.keycloak_url }}
      app_url:
        description: "Main application URL after deployment"
        value: ${{ jobs.output-deployment-urls.outputs.app_url }}
      deployment_status:
        description: "Status of the deployment"
        value: ${{ jobs.output-deployment-urls.outputs.deployment_status }}
      deployment_target:
        description: "Target platform where app was deployed"
        value: ${{ jobs.output-deployment-urls.outputs.deployment_target }}
    secrets:
      FLY_API_TOKEN:
        required: false
      ALPHA_DB_PASSWORD:
        required: false
      VPS_SSH_KEY:
        required: false
      VPS_HOST:
        required: false
      VPS_USER:
        required: false
      AZURE_CREDENTIALS:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_REGION:
        required: false
      AWS_ACCOUNT_ID:
        required: false
      DISCORD_WEBHOOK_URL:
        required: false

jobs:
  deploy-alpha:
    name: Deploy Alpha (Fly.io)
    if: inputs.deployment_stage == 'alpha'
    uses: ./.github/workflows/deploy-alpha.yml
    with:
      app_version: ${{ inputs.app_version }}
      source_branch: ${{ inputs.source_branch }}
    secrets:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      ALPHA_DB_PASSWORD: ${{ secrets.ALPHA_DB_PASSWORD }}

  deploy-beta:
    name: Deploy Beta (VPS)
    if: inputs.deployment_stage == 'beta'
    uses: ./.github/workflows/deploy-beta.yml
    with:
      app_version: ${{ inputs.app_version }}
      source_branch: ${{ inputs.source_branch }}
    secrets:
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}

  deploy-production:
    name: Deploy Production (Azure/AWS)
    if: inputs.deployment_stage == 'production'
    uses: ./.github/workflows/deploy-production.yml
    with:
      app_version: ${{ inputs.app_version }}
      source_branch: ${{ inputs.source_branch }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  output-deployment-urls:
    name: Output Deployment URLs
    runs-on: ubuntu-latest
    needs: [deploy-alpha, deploy-beta, deploy-production]
    if: always()
    outputs:
      fhir_server_url: ${{ steps.set-outputs.outputs.fhir_server_url }}
      keycloak_url: ${{ steps.set-outputs.outputs.keycloak_url }}
      app_url: ${{ steps.set-outputs.outputs.app_url }}
      deployment_status: ${{ steps.set-outputs.outputs.deployment_status }}
      deployment_target: ${{ steps.set-outputs.outputs.deployment_target }}
    
    steps:
      - name: Set deployment outputs
        id: set-outputs
        run: |
          # Initialize default values for failed deployments
          echo "fhir_server_url=" >> $GITHUB_OUTPUT
          echo "keycloak_url=" >> $GITHUB_OUTPUT
          echo "deployment_status=failed" >> $GITHUB_OUTPUT
          echo "deployment_target=unknown" >> $GITHUB_OUTPUT
          
          # Determine the job result and set appropriate values
          if [ "${{ inputs.deployment_stage }}" = "alpha" ]; then
            ALPHA_RESULT="${{ needs.deploy-alpha.result }}"
            echo "Alpha deployment result: $ALPHA_RESULT"
            
            if [ "$ALPHA_RESULT" = "success" ]; then
              echo "fhir_server_url=${{ needs.deploy-alpha.outputs.fhir_server_url }}" >> $GITHUB_OUTPUT
              echo "keycloak_url=${{ needs.deploy-alpha.outputs.keycloak_url }}" >> $GITHUB_OUTPUT
              echo "app_url=${{ needs.deploy-alpha.outputs.app_url }}" >> $GITHUB_OUTPUT
              echo "deployment_status=${{ needs.deploy-alpha.outputs.deployment_status }}" >> $GITHUB_OUTPUT
              echo "deployment_target=${{ needs.deploy-alpha.outputs.deployment_target }}" >> $GITHUB_OUTPUT
            else
              echo "deployment_status=$ALPHA_RESULT" >> $GITHUB_OUTPUT
              echo "deployment_target=fly.io" >> $GITHUB_OUTPUT
            fi
            
          elif [ "${{ inputs.deployment_stage }}" = "beta" ]; then
            BETA_RESULT="${{ needs.deploy-beta.result }}"
            echo "Beta deployment result: $BETA_RESULT"
            
            if [ "$BETA_RESULT" = "success" ]; then
              echo "fhir_server_url=${{ needs.deploy-beta.outputs.fhir_server_url }}" >> $GITHUB_OUTPUT
              echo "keycloak_url=${{ needs.deploy-beta.outputs.keycloak_url }}" >> $GITHUB_OUTPUT
              echo "app_url=${{ needs.deploy-beta.outputs.app_url }}" >> $GITHUB_OUTPUT
              echo "deployment_status=${{ needs.deploy-beta.outputs.deployment_status }}" >> $GITHUB_OUTPUT
              echo "deployment_target=${{ needs.deploy-beta.outputs.deployment_target }}" >> $GITHUB_OUTPUT
            else
              echo "deployment_status=$BETA_RESULT" >> $GITHUB_OUTPUT
              echo "deployment_target=vps" >> $GITHUB_OUTPUT
            fi
            
          elif [ "${{ inputs.deployment_stage }}" = "production" ]; then
            PROD_RESULT="${{ needs.deploy-production.result }}"
            echo "Production deployment result: $PROD_RESULT"
            
            if [ "$PROD_RESULT" = "success" ]; then
              echo "fhir_server_url=${{ needs.deploy-production.outputs.fhir_server_url }}" >> $GITHUB_OUTPUT
              echo "keycloak_url=${{ needs.deploy-production.outputs.keycloak_url }}" >> $GITHUB_OUTPUT
              echo "app_url=${{ needs.deploy-production.outputs.app_url }}" >> $GITHUB_OUTPUT
              echo "deployment_status=${{ needs.deploy-production.outputs.deployment_status }}" >> $GITHUB_OUTPUT
              echo "deployment_target=${{ needs.deploy-production.outputs.deployment_target }}" >> $GITHUB_OUTPUT
            else
              echo "deployment_status=$PROD_RESULT" >> $GITHUB_OUTPUT
              echo "deployment_target=azure-or-aws" >> $GITHUB_OUTPUT
            fi
          fi

  # Discord notification on successful deployment
  notify-deployment-success:
    name: Discord Deployment Success Notification
    needs: [output-deployment-urls]
    if: ${{ always() && needs.output-deployment-urls.outputs.deployment_status == 'success' }}
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    
    steps:
      - name: Discord Deployment Success Notification
        uses: ./.github/actions/discord-notify
        if: env.DISCORD_WEBHOOK_URL != ''
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          username: "Proxy Smart Bot"
          avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4"
          title: "üöÄ Deployment Successful!"
          description: |
            **Environment**: `${{ inputs.deployment_stage }}`
            **Version**: `${{ inputs.app_version }}`
            **Target**: `${{ needs.output-deployment-urls.outputs.deployment_target }}`
            
            **Service URLs**:
            üè• [FHIR Server](${{ needs.output-deployment-urls.outputs.fhir_server_url }})
            üîê [Keycloak Auth](${{ needs.output-deployment-urls.outputs.keycloak_url }})
            üì± [Main App](${{ needs.output-deployment-urls.outputs.app_url }})
          color: "3066993"
          timestamp: true

  # Discord notification on deployment failure
  notify-deployment-failure:
    name: Discord Deployment Failure Notification
    needs: [output-deployment-urls]
    if: ${{ always() && needs.output-deployment-urls.outputs.deployment_status != 'success' }}
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    
    steps:
      - name: Discord Deployment Failure Notification
        uses: ./.github/actions/discord-notify
        if: env.DISCORD_WEBHOOK_URL != ''
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          username: "Proxy Smart Bot"
          avatar_url: "https://avatars.githubusercontent.com/u/9919?s=200&v=4"
          title: "‚ùå Deployment Failed"
          description: |
            **Environment**: `${{ inputs.deployment_stage }}`
            **Version**: `${{ inputs.app_version }}`
            **Status**: `${{ needs.output-deployment-urls.outputs.deployment_status }}`
            **Target**: `${{ needs.output-deployment-urls.outputs.deployment_target }}`
            
            [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: "15158332"
          timestamp: true
