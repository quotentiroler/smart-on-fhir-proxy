name: 'Checklist Implementation Worker'

on:
  push:
    branches:
      - "ai/checklist/*"
  workflow_dispatch:
    inputs:
      checklist_file:
        description: 'Specific checklist file to process'
        required: false
        type: string
      item_filter:
        description: 'Filter for specific checklist items (regex pattern)'
        required: false
        type: string

permissions:
  contents: write
  actions: write
  pull-requests: write

jobs:
  checklist-implementation:
    name: AI-Powered Checklist Implementation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Bun
      uses: ./.github/actions/setup-bun-version

    - name: Setup Python with UV for AI Scripts
      uses: ./.github/actions/setup-python-ai
      with:
        python-version: '3.11'
        cache-dependency-path: 'scripts/requirements.txt'

    - name: Setup Node for AI
      uses: ./.github/actions/setup-node-ai

    - name: Analyze checklist files for implementation targets
      id: analyze-checklists
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CHECKLIST_FILE: ${{ github.event.inputs.checklist_file }}
        ITEM_FILTER: ${{ github.event.inputs.item_filter }}
      run: |
        echo "üîç Analyzing checklists for implementation opportunities..."
        
        # Build command arguments conditionally
        ARGS="--output implementation_targets.json"
        
        if [ -n "$CHECKLIST_FILE" ]; then
          ARGS="$ARGS --checklist-file '$CHECKLIST_FILE'"
        fi
        
        if [ -n "$ITEM_FILTER" ]; then
          ARGS="$ARGS --item-filter '$ITEM_FILTER'"
        fi
        
        echo "üîß Running: python scripts/checklist-analyzer.py $ARGS"
        eval "python scripts/checklist-analyzer.py $ARGS"
        
        target_count=$(python scripts/count-targets.py implementation_targets.json)
        echo "target_count=$target_count" >> $GITHUB_OUTPUT
        echo "üìä Found $target_count implementation targets"

    - name: Generate implementation plan
      if: steps.analyze-checklists.outputs.target_count > 0
      id: generate-plan
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üéØ Generating AI implementation plan..."
        python scripts/implementation-planner.py \
          --targets implementation_targets.json \
          --output implementation_plan.json \
          --branch "${{ github.ref_name }}"

    - name: Execute implementation with Junior AI + Senior AI
      if: steps.analyze-checklists.outputs.target_count > 0
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        echo "ü§ñ Starting AI-powered implementation process..."
        
        # Generate implementation requirements from plan
        python scripts/plan-to-requirements.py \
          --plan implementation_plan.json \
          --output implementation_requirements.log
        
        # Step 1: Junior AI proposes implementation
        echo "üß† Junior AI analyzing and proposing implementation..."
        python scripts/propose-changes.py implementation_requirements.log > proposed_implementation.json
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Junior AI failed to propose implementation"
          exit 1
        fi

        echo "‚úÖ Implementation proposed successfully"

        # Step 2: Senior AI reviews and refines
        echo "üéì Senior AI reviewing and refining implementation..."
        python scripts/review-changes.py proposed_implementation.json implementation_requirements.log > reviewed_implementation.json
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Senior AI failed to review implementation"
          exit 1
        fi
        
        echo "‚úÖ Senior AI completed review"
        
        # Step 3: Apply the implementation
        echo "üöÄ Applying AI-reviewed implementation..."
        python scripts/apply-changes.py reviewed_implementation.json > application_result.json
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to apply implementation"
          cat application_result.json
          exit 1
        fi
        
        echo "‚úÖ Implementation applied successfully"

    - name: Update checklists with implementation status
      if: success()
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üìù Updating checklists with implementation status..."
        python scripts/checklist-updater.py \
          --targets implementation_targets.json \
          --results application_result.json \
          --action mark-implemented

    - name: Commit implementation changes
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          echo "üìù Committing AI implementation changes..."
          
          git add .
          git commit -m "ü§ñ AI Implementation: Checklist items auto-implemented

          Automated implementation by Junior AI + Senior AI workflow
          
          Branch: ${{ github.ref_name }}
          Targets: ${{ steps.analyze-checklists.outputs.target_count }} checklist items
          Commit: ${{ github.sha }}
          Workflow: checklist-worker.yml"
          
          git push origin ${{ github.ref_name }}
          echo "‚úÖ Implementation committed and pushed"
        else
          echo "‚ÑπÔ∏è No changes to commit"
        fi

    - name: Create implementation summary
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let summary = '## ü§ñ AI Checklist Implementation Results\\n\\n';
          
          // Read results
          try {
            const targets = JSON.parse(fs.readFileSync('implementation_targets.json', 'utf8'));
            const plan = JSON.parse(fs.readFileSync('implementation_plan.json', 'utf8'));
            const result = JSON.parse(fs.readFileSync('application_result.json', 'utf8'));
            
            summary += `### üìä Implementation Statistics\\n`;
            summary += `- **Checklist Items Analyzed**: ${targets.targets?.length || 0}\\n`;
            summary += `- **Changes Applied**: ${result.changes_applied || 0}\\n`;
            summary += `- **Component Type**: ${result.component_type || 'mixed'}\\n`;
            summary += `- **Success Rate**: ${result.success ? '‚úÖ 100%' : '‚ùå Partial'}\\n\\n`;
            
            summary += `### üéØ Implementation Phases\\n`;
            if (plan.implementation_phases) {
              for (const phase of plan.implementation_phases) {
                if (phase.targets && phase.targets.length > 0) {
                  summary += `- **${phase.phase.toUpperCase()}**: ${phase.targets.length} items\\n`;
                  summary += `  - ${phase.description}\\n`;
                }
              }
            }
            
            summary += `\\n### üß† AI Collaboration Process\\n`;
            summary += `1. **Junior AI**: Analyzed requirements and proposed implementations\\n`;
            summary += `2. **Senior AI**: Reviewed proposals and refined solutions\\n`;
            summary += `3. **Automated Apply**: Validated and applied reviewed changes\\n`;
            summary += `4. **Quality Check**: Updated checklists with implementation status\\n`;
            
            if (result.errors && result.errors.length > 0) {
              summary += `\\n### ‚ö†Ô∏è Issues Encountered\\n`;
              for (const error of result.errors.slice(0, 5)) {
                summary += `- ${error}\\n`;
              }
            }
            
            summary += `\\n### üöÄ Next Steps\\n`;
            summary += `- Review implemented code in the repository\\n`;
            summary += `- Run tests to validate functionality: \`bun test\` / \`npm test\`\\n`;
            summary += `- Check updated checklist items marked as \`[implemented]\`\\n`;
            summary += `- Merge changes when ready for deployment\\n`;
            
          } catch (error) {
            summary += `‚ùå Error reading implementation results: ${error.message}\\n`;
            summary += `\\n**Targets Found**: ${{ steps.analyze-checklists.outputs.target_count }}\\n`;
          }
          
          console.log(summary);

    - name: Discord notification
      if: always()
      uses: ./.github/actions/discord-notify
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        notification-type: ${{ job.status == 'success' && 'success' || 'error' }}
        title: "ü§ñ AI Checklist Implementation Worker"
        description: |
          **Branch**: `${{ github.ref_name }}`
          **Status**: ${{ job.status }}
          **Targets**: ${{ steps.analyze-checklists.outputs.target_count }} checklist items
          **Implementation**: AI-powered SMART App Launch features
          **Collaboration**: Junior AI + Senior AI review process
        color: ${{ job.status == 'success' && '00FF00' || 'FF0000' }}  # Green for success, Red for failure
