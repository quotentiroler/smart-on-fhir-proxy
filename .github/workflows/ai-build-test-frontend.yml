name: Build & Test Frontend

on:
  workflow_call:
    inputs:
      run_tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      fail_on_test_failure:
        description: "Whether to fail the workflow if tests fail"
        required: false
        type: boolean
        default: true
    outputs:
      frontend_success:
        description: "Whether frontend build was successful"
        value: ${{ jobs.frontend.outputs.build_success }}
      frontend_tests_success:
        description: "Whether frontend tests were successful"
        value: ${{ jobs.frontend.outputs.tests_success }}
    secrets:
      APP_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      OPENAI_API_KEY:
        required: false

jobs:
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ job.status == 'success' }}
      tests_success: ${{ job.status == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      # === CLIENT API GENERATION ===
      - name: Pull Latest Backend Changes
        run: |
          echo "üîÑ Ensuring we have the latest backend changes for API generation..."
          git fetch origin --force
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Latest origin commit: $(git rev-parse origin/${{ github.ref_name }})"
          
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/${{ github.ref_name }})" ]; then
            echo "üì• New commits found, pulling latest changes..."
            git reset --hard origin/${{ github.ref_name }}
            echo "‚úÖ Updated to latest commit: $(git rev-parse HEAD)"
            echo "üìã Recent commits:"
            git log --oneline -5
          else
            echo "‚úÖ Already up to date"
            echo "üìã Recent commits:"
            git log --oneline -5
          fi

      - name: Authenticate as GitHub App for API Generation
        id: api-app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Cache OpenAPI Generator
        uses: ./.github/actions/cache-openapi-generator
        with:
          cache-key-suffix: '-frontend'

      - name: Generate Frontend API Client
        env:
          GITHUB_TOKEN: ${{ steps.api-app-auth.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Generating frontend API client from backend OpenAPI spec..."
          bun install
          cd backend && bun install && cd ..
          cd ui && bun install && cd ..
          bun run generate:ui:normalized
          
          # Configure git for potential commits
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if there are changes to commit (files should already be staged by generate:ui:normalized)
          if git diff --staged --quiet; then
            echo "üìã No API client changes to commit"
          else
            git commit -m "ü§ñ Update frontend API client from backend OpenAPI spec"
            git push
            echo "‚úÖ Frontend API client updated and committed"
          fi

      # === FRONTEND BUILD PHASE ===
      - name: Build Frontend
        id: frontend-build
        run: |
          echo "=== Building Frontend ==="
          cd ui
          bun install
          set -o pipefail  # Ensure pipeline fails if any command fails
          bun run build 2>&1 | tee ../frontend-build.log
          # Explicitly check for build errors in the log
          if grep -q "error TS\|Error:" ../frontend-build.log; then
            echo "‚ùå Build failed with TypeScript errors"
            exit 1
          fi

      - name: Check Build Status
        id: build-status
        if: always()
        run: |
          echo "Checking build outcome: ${{ steps.frontend-build.outcome }}"
          
          # Check if build log exists and contains errors
          if [ -f "frontend-build.log" ]; then
            echo "Build log found, checking for errors..."
            if grep -q "error TS\|Error:" frontend-build.log; then
              echo "‚ùå Frontend build failed - TypeScript errors found in log"
              echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
              echo "=== BUILD ERROR DETAILS ==="
              cat frontend-build.log
              echo "=========================="
            elif [ "${{ steps.frontend-build.outcome }}" == "success" ]; then
              echo "‚úÖ Frontend build successful"
              echo "BUILD_FAILED=false" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Frontend build failed - step outcome: ${{ steps.frontend-build.outcome }}"
              echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
              echo "=== BUILD ERROR DETAILS ==="
              cat frontend-build.log
              echo "=========================="
            fi
          else
            echo "‚ùå No build log found - assuming build failed"
            echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug Frontend Build Failure and Secrets
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') }}
        run: |
          echo "üêõ Frontend build failed, checking AI fix prerequisites..."
          echo "Build failed with specific errors:"
          echo "=== TYPESCRIPT ERRORS ==="
          grep -E "(error TS|Error:)" frontend-build.log || echo "No TypeScript errors found in log"
          echo "=========================="
          echo "Build outcome: ${{ steps.frontend-build.outcome }}"
          echo "Build failed flag: ${{ steps.build-status.outputs.BUILD_FAILED }}"
          echo "APP_ID available: ${{ secrets.APP_ID != '' }}"
          echo "APP_PRIVATE_KEY available: ${{ secrets.APP_PRIVATE_KEY != '' }}"
          echo "OPENAI_API_KEY available: ${{ secrets.OPENAI_API_KEY != '' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Will attempt authentication next..."

      - name: Authenticate as GitHub App (Frontend Build)
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') }}
        id: frontend-app-auth
        continue-on-error: true
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Check GitHub App Authentication
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') }}
        run: |
          echo "üîê Checking authentication results..."
          echo "Authentication step outcome: ${{ steps.frontend-app-auth.outcome }}"
          echo "Token available: ${{ steps.frontend-app-auth.outputs.token != '' }}"
          if [ "${{ steps.frontend-app-auth.outputs.token }}" != "" ]; then
            echo "‚úÖ GitHub App authentication successful"
            echo "Will proceed with AI fixes..."
          else
            echo "‚ùå GitHub App authentication failed - AI fixes will be skipped"
            echo "This could be due to:"
            echo "  - Missing APP_ID or APP_PRIVATE_KEY secrets"
            echo "  - Insufficient app permissions"
            echo "  - Running on a fork without access to secrets"
            echo "  - GitHub App not installed on this repository"
            echo "Authentication step outcome: ${{ steps.frontend-app-auth.outcome }}"
          fi

      - name: Setup Python for Frontend AI fixes
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') && steps.frontend-app-auth.outputs.token }}
        uses: ./.github/actions/setup-python-ai

      - name: Propose Frontend Fixes with Junior AI
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') && steps.frontend-app-auth.outputs.token }}
        id: frontend-propose
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Junior AI proposing initial frontend BUILD fixes..."
          echo "üìù Analyzing BUILD errors from: frontend-build.log"
          echo "üîç First 1000 chars of build log:"
          head -c 1000 frontend-build.log
          echo ""
          if python scripts/propose-changes.py frontend-build.log > scripts/proposed-frontend-fixes.json; then
            echo "‚úÖ Frontend fixes proposed successfully"
            echo "Proposed fixes:"
            cat scripts/proposed-frontend-fixes.json
          else
            echo "‚ùå Failed to propose frontend fixes"
            exit 1
          fi

      - name: Review Proposed Frontend Fixes with Senior AI
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') && steps.frontend-app-auth.outputs.token }}
        id: frontend-review
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üéì Senior AI reviewing proposed frontend BUILD fixes..."
          echo "üìã Debug info before review:"
          echo "  - Proposed fixes file exists: $(test -f scripts/proposed-frontend-fixes.json && echo 'YES' || echo 'NO')"
          echo "  - Build log file exists: $(test -f frontend-build.log && echo 'YES' || echo 'NO')"
          echo "  - OpenAI API key length: ${#OPENAI_API_KEY}"
          
          if test -f scripts/proposed-frontend-fixes.json; then
            echo "  - Proposed fixes file size: $(wc -c < scripts/proposed-frontend-fixes.json) bytes"
            echo "  - Proposed fixes preview:"
            head -n 10 scripts/proposed-frontend-fixes.json
          fi
          
          echo "ÔøΩ Starting frontend review process..."
          
          if python scripts/review-changes.py scripts/proposed-frontend-fixes.json frontend-build.log > scripts/reviewed-frontend-fixes.json; then
            echo "‚úÖ Frontend fixes reviewed successfully"
            echo "ÔøΩ Reviewed fixes file size: $(wc -c < scripts/reviewed-frontend-fixes.json) bytes"
            echo "Reviewed fixes:"
            cat scripts/reviewed-frontend-fixes.json
          else
            echo "‚ùå Failed to review frontend fixes"
            echo "üìä Exit code: $?"
            echo "üìã Debug: Checking what was written to output file..."
            if test -f scripts/reviewed-frontend-fixes.json; then
              echo "Output file exists, size: $(wc -c < scripts/reviewed-frontend-fixes.json) bytes"
              echo "Content:"
              cat scripts/reviewed-frontend-fixes.json
            else
              echo "No output file was created"
            fi
            exit 1
          fi

      - name: Apply Reviewed Frontend Fixes and retry build
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') && steps.frontend-app-auth.outputs.token }}
        id: frontend-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.frontend-app-auth.outputs.token }}
        run: |
          echo "üîß Applying reviewed frontend BUILD fixes..."
          echo "üìù Using reviewed fixes from: scripts/reviewed-frontend-fixes.json"
          if python scripts/apply-changes.py scripts/reviewed-frontend-fixes.json; then
            echo "‚úÖ Frontend BUILD fixes applied successfully"
            echo "BUILD_RETRY_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to apply frontend BUILD fixes"
            echo "BUILD_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Fail if frontend build failed and AI couldn't fix it
        if: ${{ always() && (steps.build-status.outputs.BUILD_FAILED == 'true' || steps.frontend-build.outcome == 'failure') && steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS != 'true' }}
        run: |
          echo "‚ùå Frontend BUILD failed and AI fixes did not resolve the issues"
          echo "Build status: ${{ steps.build-status.outputs.BUILD_FAILED }}"
          echo "Fix retry success: ${{ steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS }}"
          echo "=== FINAL BUILD ERRORS ==="
          cat frontend-build.log
          exit 1

      # === FRONTEND TEST PHASE ===
      - name: Test Frontend
        if: ${{ inputs.run_tests && (steps.build-status.outputs.BUILD_FAILED != 'true' || steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS == 'true') }}
        id: test-frontend
        timeout-minutes: 5
        env:
          CI: true
        run: |
          echo "Running frontend tests..."
          cd ui
          bun run test 2>&1 | tee ../frontend-test.log

      - name: Check Test Results
        if: ${{ inputs.run_tests && (steps.build-status.outputs.BUILD_FAILED != 'true' || steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS == 'true') }}
        run: |
          echo "üìä Frontend Test Results Summary:"
          echo "  - Tests enabled: ${{ inputs.run_tests }}"
          echo "  - Test step outcome: ${{ steps.test-frontend.outcome }}"
          if [[ "${{ steps.test-frontend.outcome }}" == "success" ]]; then
            echo "  ‚úÖ Frontend tests passed - skipping AI fixes"
          elif [[ "${{ steps.test-frontend.outcome }}" == "failure" ]]; then
            echo "  ‚ùå Frontend tests failed - will attempt AI fixes if authentication succeeds"
          else
            echo "  ‚ö†Ô∏è  Test outcome unclear: ${{ steps.test-frontend.outcome }}"
          fi

      - name: Check Test Status
        if: ${{ inputs.run_tests && (steps.build-status.outputs.BUILD_FAILED != 'true' || steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS == 'true') }}
        id: test-status
        run: |
          if [ "${{ steps.test-frontend.outcome }}" == "success" ]; then
            echo "‚úÖ Frontend tests successful"
            echo "TEST_FAILED=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Frontend tests failed"
            echo "TEST_FAILED=true" >> $GITHUB_OUTPUT
            echo "=== TEST ERROR DETAILS ==="
            cat frontend-test.log || echo "No test log file found"
            echo "=========================="
          fi

      - name: Authenticate as GitHub App (Frontend Tests)
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' }}
        id: frontend-test-app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Debug Test Failure
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' }}
        run: |
          echo "üêõ Frontend tests failed, checking details..."
          echo "Test outcome: ${{ steps.test-frontend.outcome }}"
          echo "=== TEST FAILURE DETAILS ==="
          grep -E "(FAIL|fail|error|Error)" frontend-test.log || echo "No test failures found in log"
          echo "=========================="

      - name: Skip AI Fixes Info
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED != 'true' }}
        run: |
          echo "‚ÑπÔ∏è  Skipping AI fixes for frontend tests because:"
          echo "  - Tests enabled: ${{ inputs.run_tests }}"
          echo "  - Test failed: ${{ steps.test-status.outputs.TEST_FAILED }}"
          echo "  - Test outcome: ${{ steps.test-frontend.outcome }}"
          echo "  - AI fixes only run when tests fail"
          echo "  ‚úÖ No fixes needed - continuing with workflow"

      - name: Setup Python for Frontend Test AI fixes
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token }}
        uses: ./.github/actions/setup-python-ai

      - name: Propose Frontend Test Fixes with Junior AI
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token }}
        id: frontend-test-propose
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Junior AI proposing initial frontend TEST fixes..."
          echo "üìù Analyzing TEST errors from: frontend-test.log"
          echo "üîç First 1000 chars of test log:"
          head -c 1000 frontend-test.log
          echo ""
          if python scripts/propose-changes.py frontend-test.log > scripts/proposed-frontend-test-fixes.json; then
            echo "‚úÖ Frontend test fixes proposed successfully"
            echo "Proposed test fixes:"
            cat scripts/proposed-frontend-test-fixes.json
          else
            echo "‚ùå Failed to propose frontend test fixes"
            exit 1
          fi

      - name: Review Proposed Frontend Test Fixes with Senior AI
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token }}
        id: frontend-test-review
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üéì Senior AI reviewing proposed frontend TEST fixes..."
          echo "üìã Debug info before test review:"
          echo "  - Proposed test fixes file exists: $(test -f scripts/proposed-frontend-test-fixes.json && echo 'YES' || echo 'NO')"
          echo "  - Test log file exists: $(test -f frontend-test.log && echo 'YES' || echo 'NO')"
          
          if test -f scripts/proposed-frontend-test-fixes.json; then
            echo "  - Proposed test fixes file size: $(wc -c < scripts/proposed-frontend-test-fixes.json) bytes"
            echo "  - Proposed test fixes preview:"
            head -n 10 scripts/proposed-frontend-test-fixes.json
          fi
          
          echo "üöÄ Starting frontend test review process..."
          
          if python scripts/review-changes.py scripts/proposed-frontend-test-fixes.json frontend-test.log > scripts/reviewed-frontend-test-fixes.json; then
            echo "‚úÖ Frontend test fixes reviewed successfully"
            echo "üìÑ Reviewed test fixes file size: $(wc -c < scripts/reviewed-frontend-test-fixes.json) bytes"
            echo "Reviewed test fixes:"
            cat scripts/reviewed-frontend-test-fixes.json
          else
            echo "‚ùå Failed to review frontend test fixes"
            exit 1
          fi

      - name: Apply Reviewed Frontend Test Fixes and retry tests
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token }}
        id: frontend-test-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.frontend-test-app-auth.outputs.token }}
        run: |
          echo "üîß Applying reviewed frontend TEST fixes..."
          echo "üìù Using reviewed test fixes from: scripts/reviewed-frontend-test-fixes.json"
          if python scripts/apply-changes.py scripts/reviewed-frontend-test-fixes.json; then
            echo "‚úÖ Frontend TEST fixes applied successfully"
            echo "üîÑ Retrying tests..."
            cd ui
            if bun run test; then
              echo "‚úÖ Tests successful after AI fixes!"
              echo "TEST_RETRY_SUCCESS=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Tests still failing after AI fixes"
              echo "TEST_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Failed to apply frontend TEST fixes"
            echo "TEST_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Fail if frontend tests failed and AI couldn't fix it
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-fix-retry.outputs.TEST_RETRY_SUCCESS != 'true' && inputs.fail_on_test_failure }}
        run: |
          echo "‚ùå Frontend tests failed and AI fixes did not resolve the issues. Failing workflow as requested."
          echo "Test status: ${{ steps.test-status.outputs.TEST_FAILED }}"
          echo "Fix retry success: ${{ steps.frontend-test-fix-retry.outputs.TEST_RETRY_SUCCESS }}"
          echo "=== FINAL TEST ERRORS ==="
          cat frontend-test.log
          exit 1
