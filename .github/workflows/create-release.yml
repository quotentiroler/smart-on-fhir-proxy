name: Create GitHub Release

on:
  workflow_call:
    inputs:
      release_type:
        description: "Type of release (alpha, beta, production)"
        required: true
        type: string
      version:
        description: "Version number for this release"
        required: true
        type: string
      changelog:
        description: "Changelog content for the release"
        required: true
        type: string
      source_branch:
        description: "Source branch for the release"
        required: true
        type: string
      is_prerelease:
        description: "Whether this is a prerelease"
        required: false
        type: boolean
        default: false
      build_number:
        description: "Build number (for non-production releases)"
        required: false
        type: string
      short_sha:
        description: "Short commit SHA (for non-production releases)"
        required: false
        type: string
    secrets:
      GH_TOKEN:
        required: true
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

    outputs:
      release_url:
        description: "The URL of the created release"
        value: ${{ jobs.create-release.outputs.release_url }}
      tag_name:
        description: "The name of the created tag"
        value: ${{ jobs.create-release.outputs.tag_name }}

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create-release.outputs.url }}
      tag_name: ${{ steps.create-release.outputs.tag_name }}
    
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create and push release tag
        run: |
          TAG_NAME="v${{ inputs.version }}"
          
          # Check if tag already exists locally or remotely
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "⚠️ Tag $TAG_NAME already exists locally"
          elif git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "⚠️ Tag $TAG_NAME already exists on remote"
          else
            echo "✅ Creating new tag: $TAG_NAME"
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Create GitHub Release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Set release type specific content
          case "${{ inputs.release_type }}" in
            "alpha")
              TITLE_SUFFIX=" (Alpha)"
              WARNING="⚠️ **This is an alpha release** - Use with caution in development environments only."
              ;;
            "beta")
              TITLE_SUFFIX=" (Beta)"
              WARNING="🧪 **This is a beta release** - Suitable for testing and staging environments."
              ;;
            "production"|"RELEASE")
              TITLE_SUFFIX=""
              WARNING=""
              ;;
            *)
              TITLE_SUFFIX=""
              WARNING="**Release Type:** ${{ inputs.release_type }}"
              ;;
          esac

          # Create release notes with shared content
          cat > release-notes.md <<-EOF
          # Proxy Smart v${{ inputs.version }}${TITLE_SUFFIX}

          ${WARNING}
          EOF

          # Add build info for non-production releases
          if [[ "${{ inputs.release_type }}" != "production" && "${{ inputs.release_type }}" != "RELEASE" ]]; then
            cat >> release-notes.md <<-EOF

          **Build Info:**
          - Build Number: ${{ inputs.build_number }}
          - Commit: ${{ inputs.short_sha }}
          - Built from: \`${{ inputs.source_branch }}\`
          EOF
          fi

          # Add the rest of the release notes
          cat >> release-notes.md <<-EOF

          ${{ inputs.changelog }}

          ## Installation
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd proxy-smart
          git checkout v${{ inputs.version }}
          \`\`\`

          See the [README](README.md) for setup instructions.
          EOF

          # Verify the release notes file was created
          if [ ! -f release-notes.md ]; then
            echo "Error: release-notes.md was not created"
            exit 1
          fi

          # Build up the --prerelease flag in pure shell
          EXTRA_ARGS=""
          if [ "${{ inputs.is_prerelease }}" = "true" ]; then
            EXTRA_ARGS="--prerelease"
          fi

          # Create the release
          TAG_NAME="v${{ inputs.version }}"
          gh release create "$TAG_NAME" \
            --title "$TAG_NAME" \
            --notes-file release-notes.md \
            $EXTRA_ARGS
          
          # Get the release URL
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME"
          
          echo "Created release: $RELEASE_URL"
          echo "url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
