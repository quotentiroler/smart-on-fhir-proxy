name: 'Setup Docker and Inferno'
description: 'Sets up Docker environment and prepares Inferno testing infrastructure'

inputs:
  test_stage:
    description: 'Testing stage: alpha, beta, or production'
    required: true
  fhir_server_url:
    description: 'FHIR server URL for Inferno testing'
    required: true
  keycloak_url:
    description: 'Keycloak URL for OAuth testing'
    required: true
    default: 'http://localhost:8080'
  inferno_version:
    description: 'Inferno Docker image version to use'
    required: false
    default: 'latest'

outputs:
  inferno_container_id:
    description: 'Container ID of the started Inferno instance'
    value: ${{ steps.start-inferno.outputs.container_id }}
  test_config_path:
    description: 'Path to the generated test configuration'
    value: ${{ steps.generate-config.outputs.config_path }}

runs:
  using: 'composite'
  steps:
  - name: Setup Docker Buildx
    uses: docker/setup-buildx-action@v3
    with:
      version: latest

  - name: Verify Docker installation
    shell: bash
    run: |
      echo "üê≥ Verifying Docker installation..."
      docker --version
      docker compose version
      docker info

  - name: Build Inferno Docker image from ONC repository
    shell: bash
    run: |
      echo "üì• Cloning and building Inferno from official ONC repository..."

      # Clone the official ONC (g)(10) test kit repository
      git clone https://github.com/onc-healthit/onc-certification-g10-test-kit.git /tmp/inferno-onc
      cd /tmp/inferno-onc

      # Checkout specific version if not latest
      if [ "${{ inputs.inferno_version }}" != "latest" ]; then
        echo "Checking out version: ${{ inputs.inferno_version }}"
        git checkout "v${{ inputs.inferno_version }}" || git checkout "${{ inputs.inferno_version }}" || echo "Using default branch"
      fi

      # Build the Docker image using the official Dockerfile
      echo "Building Inferno Docker image..."
      docker build -t onc-inferno:${{ inputs.test_stage }} .

      echo "‚úÖ Inferno Docker image built successfully"

  - name: Create test directories
    shell: bash
    run: |
      echo "üìÅ Creating test directories for ${{ inputs.test_stage }}..."
      mkdir -p testing/${{ inputs.test_stage }}/reports/inferno
      mkdir -p testing/${{ inputs.test_stage }}/config
      mkdir -p testing/${{ inputs.test_stage }}/data

  - name: Generate Inferno test configuration
    id: generate-config
    shell: bash
    run: |
      echo "‚öôÔ∏è Generating Inferno test configuration for ${{ inputs.test_stage }}..."

      # Determine test sequences based on stage
      if [ "${{ inputs.test_stage }}" = "alpha" ]; then
        SEQUENCES='["UsCoreR4CapabilityStatement", "USCore311Patient"]'
        TEST_FOCUS="basic_compliance"
      elif [ "${{ inputs.test_stage }}" = "beta" ]; then
        SEQUENCES='["UsCoreR4CapabilityStatement", "USCore311Patient", "USCore311AllergyIntolerance", "USCore311Condition", "USCore311Device", "SMARTDiscovery"]'
        TEST_FOCUS="us_core_profiles"
      else
        SEQUENCES='["UsCoreR4CapabilityStatement", "USCore311Patient", "USCore311AllergyIntolerance", "USCore311CareTeam", "USCore311Condition", "USCore311Device", "USCore311DiagnosticReport", "USCore311DocumentReference", "USCore311Encounter", "USCore311Goal", "USCore311Immunization", "USCore311Location", "USCore311Medication", "USCore311MedicationRequest", "USCore311Observation", "USCore311Organization", "USCore311Practitioner", "USCore311PractitionerRole", "USCore311Procedure", "USCore311Provenance", "SMARTDiscovery", "SMARTStandalonePatientApp", "SMARTEHRPatientApp", "BulkDataGroupExport", "BulkDataPatientExport", "BulkDataSystemExport"]'
        TEST_FOCUS="full_onc_certification"
      fi

      CONFIG_PATH="testing/${{ inputs.test_stage }}/config/inferno-runtime-config.json"

      cat > "$CONFIG_PATH" << EOF
      {
        "test_stage": "${{ inputs.test_stage }}",
        "description": "${{ inputs.test_stage }} testing with Inferno ONC Program Edition",
        "base_url": "http://localhost:4567",
        "fhir_server": {
          "url": "${{ inputs.fhir_server_url }}",
          "name": "Proxy Smart FHIR Server (${{ inputs.test_stage }})"
        },
        "inferno": {
          "module": "onc_program",
          "sequences": $SEQUENCES,
          "test_focus": "$TEST_FOCUS"
        },
        "client": {
          "client_id": "${{ inputs.test_stage }}_test_client",
          "client_secret": "${{ inputs.test_stage }}_test_secret",
          "scopes": "patient/*.read user/*.read system/*.read",
          "redirect_uri": "http://localhost:4567/inferno/callback"
        },
        "endpoints": {
          "authorization": "${{ inputs.keycloak_url }}/realms/proxy-smart/protocol/openid-connect/auth",
          "token": "${{ inputs.keycloak_url }}/realms/proxy-smart/protocol/openid-connect/token",
          "introspection": "${{ inputs.keycloak_url }}/realms/proxy-smart/protocol/openid-connect/token/introspect"
        },
        "test_settings": {
          "timeout": 120,
          "retries": 10,
          "validate_ssl": false,
          "smart_app_launch": true,
          "bulk_data": true,
          "security_testing": true
        },
        "bulk_data": {
          "group_export_endpoint": "${{ inputs.fhir_server_url }}/Group/[id]/\$export",
          "patient_export_endpoint": "${{ inputs.fhir_server_url }}/Patient/\$export",
          "system_export_endpoint": "${{ inputs.fhir_server_url }}/\$export"
        }
      }
      EOF

      echo "config_path=$CONFIG_PATH" >> $GITHUB_OUTPUT
      echo "‚úÖ Inferno configuration generated at $CONFIG_PATH"

      # Show the generated configuration for debugging
      echo "üìã Generated configuration:"
      cat "$CONFIG_PATH"

  - name: Start Inferno container
    id: start-inferno
    shell: bash
    run: |
      echo "üöÄ Starting Inferno container for ${{ inputs.test_stage }} testing..."

      # Use a simpler container name without timestamp to avoid confusion
      CONTAINER_NAME="inferno-${{ inputs.test_stage }}"

      # Stop and remove any existing container with the same name
      docker stop "$CONTAINER_NAME" 2>/dev/null || true
      docker rm "$CONTAINER_NAME" 2>/dev/null || true

      # Start Inferno container with proper volume mounts and the correct image
      CONTAINER_ID=$(docker run -d \
        --name "$CONTAINER_NAME" \
        -p 4567:4567 \
        -v "$(pwd)/testing/${{ inputs.test_stage }}/config:/opt/app/config:ro" \
        -v "$(pwd)/testing/${{ inputs.test_stage }}/reports/inferno:/opt/app/results" \
        -v "$(pwd)/testing/${{ inputs.test_stage }}/data:/opt/app/data" \
        -e "INFERNO_HOST=0.0.0.0" \
        -e "INFERNO_PORT=4567" \
        -e "BASE_URL=http://localhost:4567" \
        -e "DATABASE_URL=sqlite:////opt/app/data/inferno.db" \
        -e "DISABLE_TLS_TESTS=true" \
        -e "FHIR_REFERENCE_SERVER=false" \
        -e "RAILS_ENV=production" \
        onc-inferno:${{ inputs.test_stage }})

      echo "container_id=$CONTAINER_ID" >> $GITHUB_OUTPUT
      echo "Container name: $CONTAINER_NAME"
      echo "Container ID: $CONTAINER_ID"
      echo "‚úÖ Inferno container started"

  - name: Wait for Inferno to be ready
    shell: bash
    run: |
      echo "‚è≥ Waiting for Inferno to be ready..."
      CONTAINER_NAME="inferno-${{ inputs.test_stage }}"
      max_attempts=60
      attempt=1

      # First, wait for the container to be running
      echo "Checking if container is running..."
      while [ $attempt -le 10 ]; do
        if docker ps | grep -q "$CONTAINER_NAME"; then
          echo "‚úÖ Container is running"
          break
        fi
        echo "üîÑ Waiting for container to start... (attempt $attempt/10)"
        sleep 2
        attempt=$((attempt + 1))
      done

      if [ $attempt -gt 10 ]; then
        echo "‚ùå Container failed to start"
        echo "Container logs:"
        docker logs "$CONTAINER_NAME" || true
        echo ""
        echo "Container status:"
        docker ps -a --filter "name=$CONTAINER_NAME" || true
        echo ""
        echo "Container inspect:"
        docker inspect "$CONTAINER_NAME" || true
        exit 1
      fi

      # Now wait for Inferno to be ready
      attempt=1
      while [ $attempt -le $max_attempts ]; do
        # Check if Inferno is responding on the root path (some versions don't have /health)
        if curl -f http://localhost:4567/ >/dev/null 2>&1 || curl -f http://localhost:4567/health >/dev/null 2>&1; then
          echo "‚úÖ Inferno is ready and responding"
          break
        fi
        echo "üîÑ Waiting for Inferno... (attempt $attempt/$max_attempts)"
        sleep 10
        attempt=$((attempt + 1))
      done

      if [ $attempt -gt $max_attempts ]; then
        echo "‚ùå Inferno failed to start within timeout"
        echo "Container logs:"
        docker logs "$CONTAINER_NAME" --tail 50 || true
        echo "Container status:"
        docker ps -a | grep "$CONTAINER_NAME" || true
        echo ""
        echo "Network connectivity test:"
        curl -v http://localhost:4567/ || true
        exit 1
      fi

  - name: Verify Inferno configuration
    shell: bash
    run: |
      echo "üîç Verifying Inferno configuration..."
      CONTAINER_NAME="inferno-${{ inputs.test_stage }}"

      # Test Inferno is responding
      echo "Testing Inferno root endpoint..."
      if curl -f http://localhost:4567/ >/dev/null 2>&1; then
        echo "‚úÖ Inferno root endpoint is responding"
      else
        echo "‚ö†Ô∏è Inferno root endpoint not responding"
      fi

      # Test health endpoint if available
      echo "Testing Inferno health endpoint..."
      if curl -f http://localhost:4567/health >/dev/null 2>&1; then
        echo "‚úÖ Inferno health endpoint is responding"
      else
        echo "‚ö†Ô∏è Inferno health endpoint not available (may be normal for some versions)"
      fi

      # Test API endpoint
      echo "Testing Inferno API..."
      if curl -f http://localhost:4567/api/test_sessions >/dev/null 2>&1; then
        echo "‚úÖ Inferno API is responding"
      else
        echo "‚ö†Ô∏è Inferno API not ready yet (will retry during tests)"
      fi

      # Show container status for debugging
      echo "Container status:"
      docker ps | grep "$CONTAINER_NAME" || true

      echo "‚úÖ Inferno setup verification completed"
