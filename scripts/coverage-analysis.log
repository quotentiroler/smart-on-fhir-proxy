=== FRONTEND TEST COVERAGE ENHANCEMENT ===
Component: Frontend (React/TypeScript)
Task: Generate missing tests to improve code coverage
Current coverage: %
Target coverage: 80%
Framework: Vitest + Testing Library + Jest DOM

COVERAGE GAPS TO ADDRESS:
- Create tests for untested components
- Add edge case scenarios
- Test error handling paths
- Add integration tests where needed

UNCOVERED/LOW COVERAGE FILES:

EXISTING TEST PATTERNS (for reference):
Example test file: ../ui/test/hooks/useTheme.inside-provider.test.tsx
import React from 'react'
import { describe, it, expect } from 'vitest'
import { render, screen, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { ThemeProvider } from '@/components/theme-provider'
import { useTheme } from '@/hooks/useTheme'

function ThemeConsumer() {
  const { theme, setTheme } = useTheme()
  return (
    <div>
      <div aria-label="theme">{theme}</div>
      <button onClick={() => setTheme('dark')}>Set Dark</button>
      <button onClick={() => setTheme('light')}>Set Light</button>
      <button onClick={() => setTheme('system')}>Set System</button>
    </div>
  )
}

describe('useTheme (inside ThemeProvider)', () => {
---
Example test file: ../ui/test/hooks/useTheme.outside-provider.test.tsx
import React from 'react'
import { describe, it, expect } from 'vitest'
import { render } from '@testing-library/react'
import { useTheme } from '@/hooks/useTheme'

function ConsumerWithoutProvider() {
  // This usage should throw because no ThemeProvider wraps the component
  const { theme } = useTheme()
  return <div>{theme}</div>
}

describe('useTheme', () => {
  it('throws when used outside of ThemeProvider', () => {
    expect(() => render(<ConsumerWithoutProvider />)).toThrow()
  })
})
---
Example test file: ../ui/test/hooks/useTheme.integration.test.tsx
import React from 'react'
import { describe, it, expect } from 'vitest'
import { render } from '@testing-library/react'
import { ThemeProvider } from '@/components/theme-provider'
import { useTheme } from '@/hooks/useTheme'

function ConsumerWithoutProvider() {
  // This usage should throw if hook requires ThemeProvider
  const { theme } = useTheme()
  return <div>{theme}</div>
}

describe('useTheme integration', () => {
  it('throws when used outside of ThemeProvider', () => {
    expect(() => render(<ConsumerWithoutProvider />)).toThrow()
  })

  it('works inside ThemeProvider and exposes API', () => {
    function Consumer() {
      const { theme, setTheme } = useTheme()
---
