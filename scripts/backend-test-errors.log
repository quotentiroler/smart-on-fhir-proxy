$ bun test --coverage
bun test v1.2.19 (aad3abea)

::group::test/status.test.ts:
(pass) Status Routes (Mock) > should have health endpoint [10.00ms]
(pass) Status Routes (Mock) > should return status information
(pass) Status Routes (Mock) > should handle multiple requests

::endgroup::

::group::test/auth.test.ts:

# Unhandled error between tests
-------------------------------
183 | }
      ^
error: Unexpected }
    at /home/runner/work/proxy-smart/proxy-smart/backend/src/init.ts:183:1
-------------------------------


::group::test/index.test.ts:
(pass) Elysia Basic Tests > returns a response from root endpoint [1.00ms]
(pass) Elysia Basic Tests > returns health status [1.00ms]
(pass) Elysia Basic Tests > handles POST requests [1.00ms]
(pass) Eden Treaty Tests > returns a response using Eden Treaty [2.00ms]
(pass) Eden Treaty Tests > handles health check with Eden Treaty
(pass) Eden Treaty Tests > handles POST with Eden Treaty [1.00ms]

::endgroup::

::group::test/integration-basic.test.ts:
(pass) Integration basics with Eden Treaty > GET / returns text content [1.00ms]
(pass) Integration basics with Eden Treaty > GET /health returns expected shape
(pass) Integration basics with Eden Treaty > eden treaty client can call hello and echo [1.00ms]

::endgroup::

::group::test/auth.middleware.test.ts:

::error file=backend/test/auth.middleware.test.ts,line=24,col=24,title=error: expect(received).toBe(expected)::Expected: 401%0AReceived: 500%0A%0A      at <anonymous> (/home/runner/work/proxy-smart/proxy-smart/backend/test/auth.middleware.test.ts:24:24)
19 | describe('Auth-protected route behavior', () => {
20 |   const app = createAuthApp()
21 | 
22 |   it('responds 401 when Authorization header is missing', async () => {
23 |     const res = await app.handle(new Request('http://localhost/secure', { method: 'POST' }))
24 |     expect(res.status).toBe(401)
                            ^
error: expect(received).toBe(expected)

Expected: 401
Received: 500

      at <anonymous> (/home/runner/work/proxy-smart/proxy-smart/backend/test/auth.middleware.test.ts:24:24)
(fail) Auth-protected route behavior > responds 401 when Authorization header is missing [1.00ms]

::error file=backend/test/auth.middleware.test.ts,line=34,col=24,title=error: expect(received).toBe(expected)::Expected: 401%0AReceived: 500%0A%0A      at <anonymous> (/home/runner/work/proxy-smart/proxy-smart/backend/test/auth.middleware.test.ts:34:24)
29 |   it('responds 401 with wrong token', async () => {
30 |     const res = await app.handle(new Request('http://localhost/secure', {
31 |       method: 'POST',
32 |       headers: { Authorization: 'Bearer wrong' }
33 |     }))
34 |     expect(res.status).toBe(401)
                            ^
error: expect(received).toBe(expected)

Expected: 401
Received: 500

      at <anonymous> (/home/runner/work/proxy-smart/proxy-smart/backend/test/auth.middleware.test.ts:34:24)
(fail) Auth-protected route behavior > responds 401 with wrong token

::error file=backend/test/auth.middleware.test.ts,line=45,col=24,title=error: expect(received).toBe(expected)::Expected: 200%0AReceived: 500%0A%0A      at <anonymous> (/home/runner/work/proxy-smart/proxy-smart/backend/test/auth.middleware.test.ts:45:24)
40 |     const res = await app.handle(new Request('http://localhost/secure', {
41 |       method: 'POST',
42 |       headers: { Authorization: 'Bearer secret' }
43 |     }))
44 | 
45 |     expect(res.status).toBe(200)
                            ^
error: expect(received).toBe(expected)

Expected: 200
Received: 500

      at <anonymous> (/home/runner/work/proxy-smart/proxy-smart/backend/test/auth.middleware.test.ts:45:24)
(fail) Auth-protected route behavior > accepts valid Authorization header and returns protected payload [1.00ms]

::endgroup::

::group::test/error-handling.test.ts:
(pass) Error handling and validation > returns 500 for synchronous thrown errors [2.00ms]
(pass) Error handling and validation > returns 500 for async thrown errors [1.00ms]
(pass) Error handling and validation > validates request body and returns 400 when missing required field [1.00ms]
(pass) Error handling and validation > accepts valid payload and returns 200

::endgroup::

::group::test/integration.test.ts:
(pass) Integration Tests > Core Endpoints > should respond to root endpoint [2.00ms]
(pass) Integration Tests > Core Endpoints > should provide health check
(pass) Integration Tests > Core Endpoints > should provide detailed status
(pass) Integration Tests > API Endpoints > should handle user listing [1.00ms]
(pass) Integration Tests > API Endpoints > should handle user creation
(pass) Integration Tests > Error Handling > should handle 404 for non-existent endpoints
(pass) Integration Tests > Error Handling > should handle malformed requests gracefully [1.00ms]
(pass) Performance Tests > should respond to health check quickly [1.00ms]
(pass) Performance Tests > should handle multiple concurrent requests

::endgroup::

::group::test/validation.test.ts:
(pass) Validation Tests > should validate required fields [9.00ms]
(pass) Validation Tests > should reject invalid email format [3.00ms]
(pass) Validation Tests > should reject missing required fields [1.00ms]
(pass) Validation Tests > should handle optional fields
(pass) Header and Context Tests > should access headers [1.00ms]
(pass) Header and Context Tests > should derive context values
(pass) Header and Context Tests > should handle missing derived values [1.00ms]

::endgroup::

::group::test/notfound.test.ts:
(pass) Not Found behavior > returns 404 for an unknown route [1.00ms]
(pass) Not Found behavior > returns 200 for defined route

::endgroup::

::group::test/errors.test.ts:
(pass) Error handling tests > returns 500-like status when handler throws synchronously [1.00ms]
(pass) Error handling tests > returns 500-like status when handler throws asynchronously [1.00ms]
(pass) Error handling tests > propagates explicit Response objects from handlers

::endgroup::

::group::test/auth.config.edge.test.ts:

# Unhandled error between tests
-------------------------------
183 | }
      ^
error: Unexpected }
    at /home/runner/work/proxy-smart/proxy-smart/backend/src/init.ts:183:1
-------------------------------


::group::test/malformed-json.test.ts:
(pass) Malformed JSON handling > returns client error for malformed JSON payloads [1.00ms]
(pass) Malformed JSON handling > parses valid JSON correctly

::endgroup::

5 tests failed:
(fail) Auth-protected route behavior > responds 401 when Authorization header is missing [1.00ms]
(fail) Auth-protected route behavior > responds 401 with wrong token
(fail) Auth-protected route behavior > accepts valid Authorization header and returns protected payload [1.00ms]
--------------------------------------------------|---------|---------|-------------------
File                                              | % Funcs | % Lines | Uncovered Line #s
--------------------------------------------------|---------|---------|-------------------
All files                                         |    0.00 |    0.00 |
--------------------------------------------------|---------|---------|-------------------

 39 pass
 5 fail
 2 errors
 76 expect() calls
Ran 44 tests across 12 files. [221.00ms]
error: script "test" exited with code 1
