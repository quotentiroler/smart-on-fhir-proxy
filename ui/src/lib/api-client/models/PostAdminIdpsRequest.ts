/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508151735.a205e19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostAdminIdpsRequestConfig } from './PostAdminIdpsRequestConfig';
import {
    PostAdminIdpsRequestConfigFromJSON,
    PostAdminIdpsRequestConfigFromJSONTyped,
    PostAdminIdpsRequestConfigToJSON,
    PostAdminIdpsRequestConfigToJSONTyped,
} from './PostAdminIdpsRequestConfig';

/**
 * 
 * @export
 * @interface PostAdminIdpsRequest
 */
export interface PostAdminIdpsRequest {
    /**
     * 
     * @type {string}
     * @memberof PostAdminIdpsRequest
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof PostAdminIdpsRequest
     */
    providerId: string;
    /**
     * 
     * @type {string}
     * @memberof PostAdminIdpsRequest
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostAdminIdpsRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {PostAdminIdpsRequestConfig}
     * @memberof PostAdminIdpsRequest
     */
    config: PostAdminIdpsRequestConfig;
}

/**
 * Check if a given object implements the PostAdminIdpsRequest interface.
 */
export function instanceOfPostAdminIdpsRequest(value: object): value is PostAdminIdpsRequest {
    if (!('alias' in value) || value['alias'] === undefined) return false;
    if (!('providerId' in value) || value['providerId'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    return true;
}

export function PostAdminIdpsRequestFromJSON(json: any): PostAdminIdpsRequest {
    return PostAdminIdpsRequestFromJSONTyped(json, false);
}

export function PostAdminIdpsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostAdminIdpsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'alias': json['alias'],
        'providerId': json['providerId'],
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'config': PostAdminIdpsRequestConfigFromJSON(json['config']),
    };
}

export function PostAdminIdpsRequestToJSON(json: any): PostAdminIdpsRequest {
    return PostAdminIdpsRequestToJSONTyped(json, false);
}

export function PostAdminIdpsRequestToJSONTyped(value?: PostAdminIdpsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'alias': value['alias'],
        'providerId': value['providerId'],
        'displayName': value['displayName'],
        'enabled': value['enabled'],
        'config': PostAdminIdpsRequestConfigToJSON(value['config']),
    };
}

