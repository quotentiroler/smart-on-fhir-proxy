/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508080014.2fe36ae
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetHealth200ResponseFhirServersServersInner } from './GetHealth200ResponseFhirServersServersInner';
import {
    GetHealth200ResponseFhirServersServersInnerFromJSON,
    GetHealth200ResponseFhirServersServersInnerFromJSONTyped,
    GetHealth200ResponseFhirServersServersInnerToJSON,
    GetHealth200ResponseFhirServersServersInnerToJSONTyped,
} from './GetHealth200ResponseFhirServersServersInner';

/**
 * 
 * @export
 * @interface GetHealth200ResponseFhirServers
 */
export interface GetHealth200ResponseFhirServers {
    /**
     * Total number of configured FHIR servers
     * @type {number}
     * @memberof GetHealth200ResponseFhirServers
     */
    total: number;
    /**
     * Number of healthy FHIR servers
     * @type {number}
     * @memberof GetHealth200ResponseFhirServers
     */
    healthy: number;
    /**
     * Whether at least one FHIR server is accessible
     * @type {boolean}
     * @memberof GetHealth200ResponseFhirServers
     */
    accessible: boolean;
    /**
     * 
     * @type {Array<GetHealth200ResponseFhirServersServersInner>}
     * @memberof GetHealth200ResponseFhirServers
     */
    servers: Array<GetHealth200ResponseFhirServersServersInner>;
}

/**
 * Check if a given object implements the GetHealth200ResponseFhirServers interface.
 */
export function instanceOfGetHealth200ResponseFhirServers(value: object): value is GetHealth200ResponseFhirServers {
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('healthy' in value) || value['healthy'] === undefined) return false;
    if (!('accessible' in value) || value['accessible'] === undefined) return false;
    if (!('servers' in value) || value['servers'] === undefined) return false;
    return true;
}

export function GetHealth200ResponseFhirServersFromJSON(json: any): GetHealth200ResponseFhirServers {
    return GetHealth200ResponseFhirServersFromJSONTyped(json, false);
}

export function GetHealth200ResponseFhirServersFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetHealth200ResponseFhirServers {
    if (json == null) {
        return json;
    }
    return {
        
        'total': json['total'],
        'healthy': json['healthy'],
        'accessible': json['accessible'],
        'servers': ((json['servers'] as Array<any>).map(GetHealth200ResponseFhirServersServersInnerFromJSON)),
    };
}

export function GetHealth200ResponseFhirServersToJSON(json: any): GetHealth200ResponseFhirServers {
    return GetHealth200ResponseFhirServersToJSONTyped(json, false);
}

export function GetHealth200ResponseFhirServersToJSONTyped(value?: GetHealth200ResponseFhirServers | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total': value['total'],
        'healthy': value['healthy'],
        'accessible': value['accessible'],
        'servers': ((value['servers'] as Array<any>).map(GetHealth200ResponseFhirServersServersInnerToJSON)),
    };
}

