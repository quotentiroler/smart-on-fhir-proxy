/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508151735.a205e19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteAdminRolesByRoleName200Response,
  GetAdminRoles200ResponseInner,
  GetFhirServers500Response,
  PostAdminRolesRequest,
  PutAdminRolesByRoleName200Response,
  PutAdminRolesByRoleNameRequest,
} from '../models/index';
import {
    DeleteAdminRolesByRoleName200ResponseFromJSON,
    DeleteAdminRolesByRoleName200ResponseToJSON,
    GetAdminRoles200ResponseInnerFromJSON,
    GetAdminRoles200ResponseInnerToJSON,
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    PostAdminRolesRequestFromJSON,
    PostAdminRolesRequestToJSON,
    PutAdminRolesByRoleName200ResponseFromJSON,
    PutAdminRolesByRoleName200ResponseToJSON,
    PutAdminRolesByRoleNameRequestFromJSON,
    PutAdminRolesByRoleNameRequestToJSON,
} from '../models/index';

export interface DeleteAdminRolesByRoleNameRequest {
    roleName: string;
}

export interface GetAdminRolesByRoleNameRequest {
    roleName: string;
}

export interface PostAdminRolesOperationRequest {
    postAdminRolesRequest: PostAdminRolesRequest;
}

export interface PutAdminRolesByRoleNameOperationRequest {
    roleName: string;
    putAdminRolesByRoleNameRequest: PutAdminRolesByRoleNameRequest;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Delete a healthcare-specific role by name
     * Delete Healthcare Role
     */
    async deleteAdminRolesByRoleNameRaw(requestParameters: DeleteAdminRolesByRoleNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAdminRolesByRoleName200Response>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling deleteAdminRolesByRoleName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles/{roleName}`;
        urlPath = urlPath.replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters['roleName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a healthcare-specific role by name
     * Delete Healthcare Role
     */
    async deleteAdminRolesByRoleName(requestParameters: DeleteAdminRolesByRoleNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAdminRolesByRoleName200Response> {
        const response = await this.deleteAdminRolesByRoleNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all roles
     * List All Roles
     */
    async getAdminRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminRoles200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminRoles200ResponseInnerFromJSON));
    }

    /**
     * Get all roles
     * List All Roles
     */
    async getAdminRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminRoles200ResponseInner>> {
        const response = await this.getAdminRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a healthcare-specific role by name
     * Get Healthcare Role
     */
    async getAdminRolesByRoleNameRaw(requestParameters: GetAdminRolesByRoleNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminRoles200ResponseInner>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling getAdminRolesByRoleName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles/{roleName}`;
        urlPath = urlPath.replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters['roleName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminRoles200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Get a healthcare-specific role by name
     * Get Healthcare Role
     */
    async getAdminRolesByRoleName(requestParameters: GetAdminRolesByRoleNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminRoles200ResponseInner> {
        const response = await this.getAdminRolesByRoleNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new healthcare-specific role
     * Create Healthcare Role
     */
    async postAdminRolesRaw(requestParameters: PostAdminRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminRoles200ResponseInner>> {
        if (requestParameters['postAdminRolesRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminRolesRequest',
                'Required parameter "postAdminRolesRequest" was null or undefined when calling postAdminRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminRolesRequestToJSON(requestParameters['postAdminRolesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminRoles200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Create a new healthcare-specific role
     * Create Healthcare Role
     */
    async postAdminRoles(requestParameters: PostAdminRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminRoles200ResponseInner> {
        const response = await this.postAdminRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a healthcare-specific role by name
     * Update Healthcare Role
     */
    async putAdminRolesByRoleNameRaw(requestParameters: PutAdminRolesByRoleNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminRolesByRoleName200Response>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling putAdminRolesByRoleName().'
            );
        }

        if (requestParameters['putAdminRolesByRoleNameRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminRolesByRoleNameRequest',
                'Required parameter "putAdminRolesByRoleNameRequest" was null or undefined when calling putAdminRolesByRoleName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles/{roleName}`;
        urlPath = urlPath.replace(`{${"roleName"}}`, encodeURIComponent(String(requestParameters['roleName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminRolesByRoleNameRequestToJSON(requestParameters['putAdminRolesByRoleNameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a healthcare-specific role by name
     * Update Healthcare Role
     */
    async putAdminRolesByRoleName(requestParameters: PutAdminRolesByRoleNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminRolesByRoleName200Response> {
        const response = await this.putAdminRolesByRoleNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
