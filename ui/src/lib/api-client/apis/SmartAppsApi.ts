/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508151735.a205e19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAdminSmartApps200ResponseInner,
  GetFhirServers500Response,
  PostAdminSmartAppsRequest,
  PutAdminSmartAppsByClientId200Response,
  PutAdminSmartAppsByClientIdRequest,
} from '../models/index';
import {
    GetAdminSmartApps200ResponseInnerFromJSON,
    GetAdminSmartApps200ResponseInnerToJSON,
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    PostAdminSmartAppsRequestFromJSON,
    PostAdminSmartAppsRequestToJSON,
    PutAdminSmartAppsByClientId200ResponseFromJSON,
    PutAdminSmartAppsByClientId200ResponseToJSON,
    PutAdminSmartAppsByClientIdRequestFromJSON,
    PutAdminSmartAppsByClientIdRequestToJSON,
} from '../models/index';

export interface DeleteAdminSmartAppsByClientIdRequest {
    clientId: string;
}

export interface GetAdminSmartAppsByClientIdRequest {
    clientId: string;
}

export interface PostAdminSmartAppsOperationRequest {
    postAdminSmartAppsRequest: PostAdminSmartAppsRequest;
}

export interface PutAdminSmartAppsByClientIdOperationRequest {
    clientId: string;
    putAdminSmartAppsByClientIdRequest: PutAdminSmartAppsByClientIdRequest;
}

/**
 * 
 */
export class SmartAppsApi extends runtime.BaseAPI {

    /**
     * Delete a SMART on FHIR application by clientId
     * Delete SMART on FHIR Application
     */
    async deleteAdminSmartAppsByClientIdRaw(requestParameters: DeleteAdminSmartAppsByClientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling deleteAdminSmartAppsByClientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-apps/{clientId}`;
        urlPath = urlPath.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a SMART on FHIR application by clientId
     * Delete SMART on FHIR Application
     */
    async deleteAdminSmartAppsByClientId(requestParameters: DeleteAdminSmartAppsByClientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.deleteAdminSmartAppsByClientIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all registered SMART on FHIR applications
     * List SMART on FHIR Applications
     */
    async getAdminSmartAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminSmartApps200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-apps/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminSmartApps200ResponseInnerFromJSON));
    }

    /**
     * Get all registered SMART on FHIR applications
     * List SMART on FHIR Applications
     */
    async getAdminSmartApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminSmartApps200ResponseInner>> {
        const response = await this.getAdminSmartAppsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a single SMART on FHIR application by clientId
     * Get SMART on FHIR Application
     */
    async getAdminSmartAppsByClientIdRaw(requestParameters: GetAdminSmartAppsByClientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminSmartApps200ResponseInner>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling getAdminSmartAppsByClientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-apps/{clientId}`;
        urlPath = urlPath.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminSmartApps200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Get a single SMART on FHIR application by clientId
     * Get SMART on FHIR Application
     */
    async getAdminSmartAppsByClientId(requestParameters: GetAdminSmartAppsByClientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminSmartApps200ResponseInner> {
        const response = await this.getAdminSmartAppsByClientIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new SMART on FHIR application
     * Create SMART on FHIR Application
     */
    async postAdminSmartAppsRaw(requestParameters: PostAdminSmartAppsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminSmartApps200ResponseInner>> {
        if (requestParameters['postAdminSmartAppsRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminSmartAppsRequest',
                'Required parameter "postAdminSmartAppsRequest" was null or undefined when calling postAdminSmartApps().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-apps/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminSmartAppsRequestToJSON(requestParameters['postAdminSmartAppsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminSmartApps200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Create a new SMART on FHIR application
     * Create SMART on FHIR Application
     */
    async postAdminSmartApps(requestParameters: PostAdminSmartAppsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminSmartApps200ResponseInner> {
        const response = await this.postAdminSmartAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-config/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminSmartConfigRefreshRaw(initOverrides);
    }

    /**
     * Update an existing SMART on FHIR application
     * Update SMART on FHIR Application
     */
    async putAdminSmartAppsByClientIdRaw(requestParameters: PutAdminSmartAppsByClientIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling putAdminSmartAppsByClientId().'
            );
        }

        if (requestParameters['putAdminSmartAppsByClientIdRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminSmartAppsByClientIdRequest',
                'Required parameter "putAdminSmartAppsByClientIdRequest" was null or undefined when calling putAdminSmartAppsByClientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-apps/{clientId}`;
        urlPath = urlPath.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters['clientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminSmartAppsByClientIdRequestToJSON(requestParameters['putAdminSmartAppsByClientIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing SMART on FHIR application
     * Update SMART on FHIR Application
     */
    async putAdminSmartAppsByClientId(requestParameters: PutAdminSmartAppsByClientIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.putAdminSmartAppsByClientIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
