/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508151735.a205e19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAuthConfig200Response,
  GetAuthIdentityProviders200ResponseInner,
  GetAuthUserinfo200Response,
  PostAuthIntrospect200Response,
  PostAuthIntrospectRequest,
  PostAuthRegisterRequest,
  PostAuthToken200Response,
  PostAuthTokenRequest,
  PostFhirServers401Response,
} from '../models/index';
import {
    GetAuthConfig200ResponseFromJSON,
    GetAuthConfig200ResponseToJSON,
    GetAuthIdentityProviders200ResponseInnerFromJSON,
    GetAuthIdentityProviders200ResponseInnerToJSON,
    GetAuthUserinfo200ResponseFromJSON,
    GetAuthUserinfo200ResponseToJSON,
    PostAuthIntrospect200ResponseFromJSON,
    PostAuthIntrospect200ResponseToJSON,
    PostAuthIntrospectRequestFromJSON,
    PostAuthIntrospectRequestToJSON,
    PostAuthRegisterRequestFromJSON,
    PostAuthRegisterRequestToJSON,
    PostAuthToken200ResponseFromJSON,
    PostAuthToken200ResponseToJSON,
    PostAuthTokenRequestFromJSON,
    PostAuthTokenRequestToJSON,
    PostFhirServers401ResponseFromJSON,
    PostFhirServers401ResponseToJSON,
} from '../models/index';

export interface GetAuthAuthorizeRequest {
    responseType?: string;
    clientId?: string;
    redirectUri?: string;
    scope?: string;
    state?: string;
    codeChallenge?: string;
    codeChallengeMethod?: string;
    authorizationDetails?: string;
    kcIdpHint?: string;
}

export interface GetAuthLoginRequest {
    clientId?: string;
    redirectUri?: string;
    scope?: string;
    state?: string;
    codeChallenge?: string;
    codeChallengeMethod?: string;
    authorizationDetails?: string;
}

export interface GetAuthLogoutRequest {
    postLogoutRedirectUri?: string;
    idTokenHint?: string;
    clientId?: string;
}

export interface GetAuthUserinfoRequest {
    authorization: string;
}

export interface PostAuthIntrospectOperationRequest {
    postAuthIntrospectRequest: PostAuthIntrospectRequest;
}

export interface PostAuthRegisterOperationRequest {
    postAuthRegisterRequest: PostAuthRegisterRequest;
}

export interface PostAuthTokenOperationRequest {
    postAuthTokenRequest: PostAuthTokenRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Redirects to Keycloak authorization endpoint for OAuth flow with support for authorization details
     * OAuth Authorization Endpoint
     */
    async getAuthAuthorizeRaw(requestParameters: GetAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['codeChallenge'] != null) {
            queryParameters['code_challenge'] = requestParameters['codeChallenge'];
        }

        if (requestParameters['codeChallengeMethod'] != null) {
            queryParameters['code_challenge_method'] = requestParameters['codeChallengeMethod'];
        }

        if (requestParameters['authorizationDetails'] != null) {
            queryParameters['authorization_details'] = requestParameters['authorizationDetails'];
        }

        if (requestParameters['kcIdpHint'] != null) {
            queryParameters['kc_idp_hint'] = requestParameters['kcIdpHint'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/authorize`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirects to Keycloak authorization endpoint for OAuth flow with support for authorization details
     * OAuth Authorization Endpoint
     */
    async getAuthAuthorize(requestParameters: GetAuthAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAuthAuthorizeRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the current authentication configuration status
     * Get authentication configuration
     */
    async getAuthConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuthConfig200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuthConfig200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the current authentication configuration status
     * Get authentication configuration
     */
    async getAuthConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuthConfig200Response> {
        const response = await this.getAuthConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get list of enabled identity providers for login page (public endpoint)
     * Get Public Identity Providers
     */
    async getAuthIdentityProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAuthIdentityProviders200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/identity-providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAuthIdentityProviders200ResponseInnerFromJSON));
    }

    /**
     * Get list of enabled identity providers for login page (public endpoint)
     * Get Public Identity Providers
     */
    async getAuthIdentityProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAuthIdentityProviders200ResponseInner>> {
        const response = await this.getAuthIdentityProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Simplified login endpoint that redirects to Keycloak with sensible defaults for UI applications
     * Login Page Redirect
     */
    async getAuthLoginRaw(requestParameters: GetAuthLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['codeChallenge'] != null) {
            queryParameters['code_challenge'] = requestParameters['codeChallenge'];
        }

        if (requestParameters['codeChallengeMethod'] != null) {
            queryParameters['code_challenge_method'] = requestParameters['codeChallengeMethod'];
        }

        if (requestParameters['authorizationDetails'] != null) {
            queryParameters['authorization_details'] = requestParameters['authorizationDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Simplified login endpoint that redirects to Keycloak with sensible defaults for UI applications
     * Login Page Redirect
     */
    async getAuthLogin(requestParameters: GetAuthLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAuthLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Proxies logout requests to Keycloak with sensible defaults
     * Logout Endpoint
     */
    async getAuthLogoutRaw(requestParameters: GetAuthLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['postLogoutRedirectUri'] != null) {
            queryParameters['post_logout_redirect_uri'] = requestParameters['postLogoutRedirectUri'];
        }

        if (requestParameters['idTokenHint'] != null) {
            queryParameters['id_token_hint'] = requestParameters['idTokenHint'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Proxies logout requests to Keycloak with sensible defaults
     * Logout Endpoint
     */
    async getAuthLogout(requestParameters: GetAuthLogoutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAuthLogoutRaw(requestParameters, initOverrides);
    }

    /**
     * Get authenticated user profile information from JWT token
     * Get Current User Profile
     */
    async getAuthUserinfoRaw(requestParameters: GetAuthUserinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuthUserinfo200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getAuthUserinfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/userinfo`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuthUserinfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get authenticated user profile information from JWT token
     * Get Current User Profile
     */
    async getAuthUserinfo(requestParameters: GetAuthUserinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuthUserinfo200Response> {
        const response = await this.getAuthUserinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate and get information about an access token
     * Token Introspection
     */
    async postAuthIntrospectRaw(requestParameters: PostAuthIntrospectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAuthIntrospect200Response>> {
        if (requestParameters['postAuthIntrospectRequest'] == null) {
            throw new runtime.RequiredError(
                'postAuthIntrospectRequest',
                'Required parameter "postAuthIntrospectRequest" was null or undefined when calling postAuthIntrospect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/introspect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAuthIntrospectRequestToJSON(requestParameters['postAuthIntrospectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAuthIntrospect200ResponseFromJSON(jsonValue));
    }

    /**
     * Validate and get information about an access token
     * Token Introspection
     */
    async postAuthIntrospect(requestParameters: PostAuthIntrospectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAuthIntrospect200Response> {
        const response = await this.postAuthIntrospectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new OAuth2 client dynamically according to RFC 7591. This is a public endpoint that does not require authentication.
     * Dynamic Client Registration
     */
    async postAuthRegisterRaw(requestParameters: PostAuthRegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postAuthRegisterRequest'] == null) {
            throw new runtime.RequiredError(
                'postAuthRegisterRequest',
                'Required parameter "postAuthRegisterRequest" was null or undefined when calling postAuthRegister().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAuthRegisterRequestToJSON(requestParameters['postAuthRegisterRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new OAuth2 client dynamically according to RFC 7591. This is a public endpoint that does not require authentication.
     * Dynamic Client Registration
     */
    async postAuthRegister(requestParameters: PostAuthRegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAuthRegisterRaw(requestParameters, initOverrides);
    }

    /**
     * Exchange authorization code for access token with SMART launch context and authorization details for multiple FHIR servers
     * OAuth Token Exchange
     */
    async postAuthTokenRaw(requestParameters: PostAuthTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAuthToken200Response>> {
        if (requestParameters['postAuthTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'postAuthTokenRequest',
                'Required parameter "postAuthTokenRequest" was null or undefined when calling postAuthToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAuthTokenRequestToJSON(requestParameters['postAuthTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAuthToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Exchange authorization code for access token with SMART launch context and authorization details for multiple FHIR servers
     * OAuth Token Exchange
     */
    async postAuthToken(requestParameters: PostAuthTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAuthToken200Response> {
        const response = await this.postAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
