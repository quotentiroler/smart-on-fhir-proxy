/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508151735.a205e19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAdminHealthcareUsers200ResponseInner,
  GetAdminHealthcareUsersLimitParameter,
  GetAdminHealthcareUsersOffsetParameter,
  GetFhirServers500Response,
  PostAdminHealthcareUsersRequest,
  PutAdminHealthcareUsersByUserIdRequest,
  PutAdminSmartAppsByClientId200Response,
} from '../models/index';
import {
    GetAdminHealthcareUsers200ResponseInnerFromJSON,
    GetAdminHealthcareUsers200ResponseInnerToJSON,
    GetAdminHealthcareUsersLimitParameterFromJSON,
    GetAdminHealthcareUsersLimitParameterToJSON,
    GetAdminHealthcareUsersOffsetParameterFromJSON,
    GetAdminHealthcareUsersOffsetParameterToJSON,
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    PostAdminHealthcareUsersRequestFromJSON,
    PostAdminHealthcareUsersRequestToJSON,
    PutAdminHealthcareUsersByUserIdRequestFromJSON,
    PutAdminHealthcareUsersByUserIdRequestToJSON,
    PutAdminSmartAppsByClientId200ResponseFromJSON,
    PutAdminSmartAppsByClientId200ResponseToJSON,
} from '../models/index';

export interface DeleteAdminHealthcareUsersByUserIdRequest {
    userId: string;
}

export interface GetAdminHealthcareUsersRequest {
    limit?: GetAdminHealthcareUsersLimitParameter;
    offset?: GetAdminHealthcareUsersOffsetParameter;
}

export interface GetAdminHealthcareUsersByUserIdRequest {
    userId: string;
}

export interface PostAdminHealthcareUsersOperationRequest {
    postAdminHealthcareUsersRequest: PostAdminHealthcareUsersRequest;
}

export interface PutAdminHealthcareUsersByUserIdOperationRequest {
    userId: string;
    putAdminHealthcareUsersByUserIdRequest: PutAdminHealthcareUsersByUserIdRequest;
}

/**
 * 
 */
export class HealthcareUsersApi extends runtime.BaseAPI {

    /**
     * Delete a healthcare user by userId
     * Delete Healthcare User
     */
    async deleteAdminHealthcareUsersByUserIdRaw(requestParameters: DeleteAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminHealthcareUsersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a healthcare user by userId
     * Delete Healthcare User
     */
    async deleteAdminHealthcareUsersByUserId(requestParameters: DeleteAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.deleteAdminHealthcareUsersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all healthcare users with optional pagination
     * List Healthcare Users
     */
    async getAdminHealthcareUsersRaw(requestParameters: GetAdminHealthcareUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminHealthcareUsers200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminHealthcareUsers200ResponseInnerFromJSON));
    }

    /**
     * Get all healthcare users with optional pagination
     * List Healthcare Users
     */
    async getAdminHealthcareUsers(requestParameters: GetAdminHealthcareUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminHealthcareUsers200ResponseInner>> {
        const response = await this.getAdminHealthcareUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a healthcare user by userId
     * Get Healthcare User
     */
    async getAdminHealthcareUsersByUserIdRaw(requestParameters: GetAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminHealthcareUsers200ResponseInner>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAdminHealthcareUsersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminHealthcareUsers200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Get a healthcare user by userId
     * Get Healthcare User
     */
    async getAdminHealthcareUsersByUserId(requestParameters: GetAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminHealthcareUsers200ResponseInner> {
        const response = await this.getAdminHealthcareUsersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new healthcare user
     * Create Healthcare User
     */
    async postAdminHealthcareUsersRaw(requestParameters: PostAdminHealthcareUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminHealthcareUsers200ResponseInner>> {
        if (requestParameters['postAdminHealthcareUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminHealthcareUsersRequest',
                'Required parameter "postAdminHealthcareUsersRequest" was null or undefined when calling postAdminHealthcareUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminHealthcareUsersRequestToJSON(requestParameters['postAdminHealthcareUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminHealthcareUsers200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Create a new healthcare user
     * Create Healthcare User
     */
    async postAdminHealthcareUsers(requestParameters: PostAdminHealthcareUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminHealthcareUsers200ResponseInner> {
        const response = await this.postAdminHealthcareUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a healthcare user by userId
     * Update Healthcare User
     */
    async putAdminHealthcareUsersByUserIdRaw(requestParameters: PutAdminHealthcareUsersByUserIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminHealthcareUsers200ResponseInner>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminHealthcareUsersByUserId().'
            );
        }

        if (requestParameters['putAdminHealthcareUsersByUserIdRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminHealthcareUsersByUserIdRequest',
                'Required parameter "putAdminHealthcareUsersByUserIdRequest" was null or undefined when calling putAdminHealthcareUsersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminHealthcareUsersByUserIdRequestToJSON(requestParameters['putAdminHealthcareUsersByUserIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminHealthcareUsers200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Update a healthcare user by userId
     * Update Healthcare User
     */
    async putAdminHealthcareUsersByUserId(requestParameters: PutAdminHealthcareUsersByUserIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminHealthcareUsers200ResponseInner> {
        const response = await this.putAdminHealthcareUsersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
