/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202508151735.a205e19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAdminClientRegistrationSettings200Response,
  GetAdminKeycloakConfigStatus200Response,
  GetFhirServers500Response,
  PostAdminKeycloakConfigConfigure200Response,
  PostAdminKeycloakConfigConfigureRequest,
  PostAdminKeycloakConfigTest200Response,
  PostAdminKeycloakConfigTestRequest,
  PostAdminShutdown200Response,
  PutAdminSmartAppsByClientId200Response,
} from '../models/index';
import {
    GetAdminClientRegistrationSettings200ResponseFromJSON,
    GetAdminClientRegistrationSettings200ResponseToJSON,
    GetAdminKeycloakConfigStatus200ResponseFromJSON,
    GetAdminKeycloakConfigStatus200ResponseToJSON,
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    PostAdminKeycloakConfigConfigure200ResponseFromJSON,
    PostAdminKeycloakConfigConfigure200ResponseToJSON,
    PostAdminKeycloakConfigConfigureRequestFromJSON,
    PostAdminKeycloakConfigConfigureRequestToJSON,
    PostAdminKeycloakConfigTest200ResponseFromJSON,
    PostAdminKeycloakConfigTest200ResponseToJSON,
    PostAdminKeycloakConfigTestRequestFromJSON,
    PostAdminKeycloakConfigTestRequestToJSON,
    PostAdminShutdown200ResponseFromJSON,
    PostAdminShutdown200ResponseToJSON,
    PutAdminSmartAppsByClientId200ResponseFromJSON,
    PutAdminSmartAppsByClientId200ResponseToJSON,
} from '../models/index';

export interface PostAdminKeycloakConfigConfigureOperationRequest {
    postAdminKeycloakConfigConfigureRequest: PostAdminKeycloakConfigConfigureRequest;
}

export interface PostAdminKeycloakConfigTestOperationRequest {
    postAdminKeycloakConfigTestRequest: PostAdminKeycloakConfigTestRequest;
}

export interface PutAdminClientRegistrationSettingsRequest {
    getAdminClientRegistrationSettings200Response: GetAdminClientRegistrationSettings200Response;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get current settings for dynamic client registration
     * Get Dynamic Client Registration Settings
     */
    async getAdminClientRegistrationSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminClientRegistrationSettings200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminClientRegistrationSettings200ResponseFromJSON(jsonValue));
    }

    /**
     * Get current settings for dynamic client registration
     * Get Dynamic Client Registration Settings
     */
    async getAdminClientRegistrationSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminClientRegistrationSettings200Response> {
        const response = await this.getAdminClientRegistrationSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current Keycloak settings for administrative purposes. Use /auth/config for public availability check.
     * Get Keycloak Admin Configuration
     */
    async getAdminKeycloakConfigStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminKeycloakConfigStatus200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/keycloak-config/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminKeycloakConfigStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Get current Keycloak settings for administrative purposes. Use /auth/config for public availability check.
     * Get Keycloak Admin Configuration
     */
    async getAdminKeycloakConfigStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminKeycloakConfigStatus200Response> {
        const response = await this.getAdminKeycloakConfigStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reset all client registration settings to their default values
     * Reset Client Registration Settings to Defaults
     */
    async postAdminClientRegistrationResetDefaultsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/reset-defaults`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Reset all client registration settings to their default values
     * Reset Client Registration Settings to Defaults
     */
    async postAdminClientRegistrationResetDefaults(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.postAdminClientRegistrationResetDefaultsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Save Keycloak configuration to environment and restart connection
     * Configure Keycloak Connection
     */
    async postAdminKeycloakConfigConfigureRaw(requestParameters: PostAdminKeycloakConfigConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminKeycloakConfigConfigure200Response>> {
        if (requestParameters['postAdminKeycloakConfigConfigureRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminKeycloakConfigConfigureRequest',
                'Required parameter "postAdminKeycloakConfigConfigureRequest" was null or undefined when calling postAdminKeycloakConfigConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/keycloak-config/configure`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminKeycloakConfigConfigureRequestToJSON(requestParameters['postAdminKeycloakConfigConfigureRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminKeycloakConfigConfigure200ResponseFromJSON(jsonValue));
    }

    /**
     * Save Keycloak configuration to environment and restart connection
     * Configure Keycloak Connection
     */
    async postAdminKeycloakConfigConfigure(requestParameters: PostAdminKeycloakConfigConfigureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminKeycloakConfigConfigure200Response> {
        const response = await this.postAdminKeycloakConfigConfigureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test connection to Keycloak without saving configuration
     * Test Keycloak Connection
     */
    async postAdminKeycloakConfigTestRaw(requestParameters: PostAdminKeycloakConfigTestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminKeycloakConfigTest200Response>> {
        if (requestParameters['postAdminKeycloakConfigTestRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminKeycloakConfigTestRequest',
                'Required parameter "postAdminKeycloakConfigTestRequest" was null or undefined when calling postAdminKeycloakConfigTest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/keycloak-config/test`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminKeycloakConfigTestRequestToJSON(requestParameters['postAdminKeycloakConfigTestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminKeycloakConfigTest200ResponseFromJSON(jsonValue));
    }

    /**
     * Test connection to Keycloak without saving configuration
     * Test Keycloak Connection
     */
    async postAdminKeycloakConfigTest(requestParameters: PostAdminKeycloakConfigTestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminKeycloakConfigTest200Response> {
        const response = await this.postAdminKeycloakConfigTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restart the SMART on FHIR server (admin only)
     * Restart Server
     */
    async postAdminRestartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminShutdown200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/restart`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminShutdown200ResponseFromJSON(jsonValue));
    }

    /**
     * Restart the SMART on FHIR server (admin only)
     * Restart Server
     */
    async postAdminRestart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminShutdown200Response> {
        const response = await this.postAdminRestartRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gracefully shutdown the SMART on FHIR server (admin only)
     * Shutdown Server
     */
    async postAdminShutdownRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminShutdown200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/shutdown`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminShutdown200ResponseFromJSON(jsonValue));
    }

    /**
     * Gracefully shutdown the SMART on FHIR server (admin only)
     * Shutdown Server
     */
    async postAdminShutdown(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminShutdown200Response> {
        const response = await this.postAdminShutdownRaw(initOverrides);
        return await response.value();
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-config/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminSmartConfigRefreshRaw(initOverrides);
    }

    /**
     * Update settings for dynamic client registration
     * Update Dynamic Client Registration Settings
     */
    async putAdminClientRegistrationSettingsRaw(requestParameters: PutAdminClientRegistrationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['getAdminClientRegistrationSettings200Response'] == null) {
            throw new runtime.RequiredError(
                'getAdminClientRegistrationSettings200Response',
                'Required parameter "getAdminClientRegistrationSettings200Response" was null or undefined when calling putAdminClientRegistrationSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GetAdminClientRegistrationSettings200ResponseToJSON(requestParameters['getAdminClientRegistrationSettings200Response']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Update settings for dynamic client registration
     * Update Dynamic Client Registration Settings
     */
    async putAdminClientRegistrationSettings(requestParameters: PutAdminClientRegistrationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.putAdminClientRegistrationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
