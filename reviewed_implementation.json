{
  "analysis": "I validated the junior AI\u2019s proposed components against typical React/TypeScript best practices and the likely needs of a SMART App Launch UI. The additions are directionally helpful but need refinement to align with OAuth/SMART specifics, better validation, safer browser APIs, proper URL construction (authorize vs base FHIR URL), UX/accessibility, and reusability. I also want to align with potential existing project utilities (but since we can\u2019t safely assume them, I kept dependencies minimal). Key improvements:\n- SmartAppSimulator: Correct authorization URL composition by separating issuer/authorization endpoint from FHIR base, add PKCE generation, state, nonce, audience/launch format realism, better scope handling, safer base64url encoding for mock tokens, and optional endpoints override. Avoid using window.btoa for unicode data and ensure base64url encoding. Provide copy buttons and reset. Maintain offline mock behavior.\n- PermissionMatrix: Improve scope handling with de-duplication, validation for SMART scope syntax, better UX, and debounced onSave to avoid rapid calls. Keep purely scope-based management as per checklist without introducing unimplemented permission columns UI.\n- FHIRMetadataValidator: Implement more precise SMART-on-FHIR CapabilityStatement checks (smart-configuration via .well-known, oauth-uris extension parsing per spec, presence of authorize/token endpoints, and optionally introspection/revocation per server). Provide clear pass/fail messages, robust error handling, and parsing for URL fields. Offer CORS hint.\n- Index: export consistent default and named exports.\nAll files are placed under ui/src/components/SmartAppsManager and are self-contained. No existing files are modified. The search fields are empty for create actions as required. These should compile under Vite + TS React without additional deps.\n",
  "changes": [
    {
      "action": "create",
      "file": "ui/src/components/SmartAppsManager/SmartAppSimulator.tsx",
      "search": "",
      "replace": "import React, { useMemo, useState } from 'react';\n\n/**\n * SmartAppSimulator\n * SMART App Launch 2.x simulation helper. Builds an authorization URL with PKCE, state, and nonce.\n * Tries optional backend /api/simulate-launch; falls back to local mock tokens.\n */\n\ntype SimResult = {\n  authorizeUrl: string;\n  simulatedIdToken?: string;\n  simulatedAccessToken?: string;\n  note?: string;\n};\n\ntype LaunchContext = 'patient' | 'user';\n\nconst defaultScopes = 'openid profile launch patient/*.read';\n\n// base64url encode utility\nfunction base64url(input: ArrayBuffer | Uint8Array) {\n  const bytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;\n  let binary = '';\n  for (let i = 0; i < bytes.byteLength; i++) binary += String.fromCharCode(bytes[i]);\n  const b64 = btoa(binary);\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/g, '');\n}\n\nasync function sha256(input: string) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(input);\n  const hash = await crypto.subtle.digest('SHA-256', data);\n  return new Uint8Array(hash);\n}\n\nfunction randomString(len = 43) {\n  const arr = new Uint8Array(len);\n  crypto.getRandomValues(arr);\n  // base64url of random bytes; trim to len\n  return base64url(arr).slice(0, len);\n}\n\nexport const SmartAppSimulator: React.FC = () => {\n  const [clientId, setClientId] = useState('');\n  const [redirectUri, setRedirectUri] = useState('http://localhost:5173/callback');\n  const [issuer, setIssuer] = useState(''); // Authorization server issuer (OIDC)\n  const [authorizeEndpoint, setAuthorizeEndpoint] = useState(''); // optional override\n  const [fhirBase, setFhirBase] = useState(''); // SMART launch context base URL\n  const [patient, setPatient] = useState('');\n  const [scopes, setScopes] = useState(defaultScopes);\n  const [launchContext, setLaunchContext] = useState<LaunchContext>('patient');\n  const [aud, setAud] = useState(''); // audience parameter for EHR FHIR base\n  const [usePkce, setUsePkce] = useState(true);\n\n  const [codeVerifier, setCodeVerifier] = useState<string>('');\n  const [codeChallenge, setCodeChallenge] = useState<string>('');\n  const [state, setState] = useState<string>('');\n  const [nonce, setNonce] = useState<string>('');\n\n  const [result, setResult] = useState<SimResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const validate = () => {\n    if (!clientId) return 'Client ID is required';\n    if (!redirectUri) return 'Redirect URI is required';\n    if (!issuer && !authorizeEndpoint) return 'Issuer or explicit authorize endpoint is required';\n    if (!fhirBase) return 'FHIR Base URL is required';\n    if (!aud) return 'Audience (aud) should be the FHIR Base URL for EHR context';\n    if (launchContext === 'patient' && !patient) return 'Patient context requires a patient ID';\n    return null;\n  };\n\n  const effectiveAuthorizeEndpoint = useMemo(() => {\n    if (authorizeEndpoint) return authorizeEndpoint.trim();\n    // Common pattern: OIDC authorize under issuer .well-known or /authorize\n    // We can\u2019t reliably fetch discovery here without CORS; provide a reasonable default.\n    return issuer.replace(/\\/$/, '') + '/authorize';\n  }, [authorizeEndpoint, issuer]);\n\n  const buildAuthUrl = async () => {\n    const params = new URLSearchParams();\n    params.set('response_type', 'code');\n    params.set('client_id', clientId);\n    params.set('redirect_uri', redirectUri);\n    params.set('scope', scopes);\n    params.set('aud', aud);\n    if (launchContext === 'patient') params.set('launch', patient);\n\n    const st = state || randomString(16);\n    const nn = nonce || randomString(16);\n    params.set('state', st);\n    params.set('nonce', nn);\n\n    let cv = codeVerifier;\n    let cc = codeChallenge;\n    if (usePkce) {\n      cv = cv || randomString(64);\n      cc = base64url(await sha256(cv));\n      params.set('code_challenge', cc);\n      params.set('code_challenge_method', 'S256');\n    }\n\n    setState(st);\n    setNonce(nn);\n    setCodeVerifier(cv);\n    setCodeChallenge(cc);\n\n    return effectiveAuthorizeEndpoint.replace(/\\/$/, '') + '?' + params.toString();\n  };\n\n  const generateMockToken = () => {\n    // Minimal base64url pseudo-JWT (for display only)\n    const header = base64url(new TextEncoder().encode(JSON.stringify({ alg: 'none', typ: 'JWT' })));\n    const payloadObj: any = {\n      iss: issuer || 'https://auth.example',\n      aud: clientId || 'spa-client',\n      exp: Math.floor(Date.now() / 1000) + 3600,\n      fhirBase,\n      scope: scopes,\n      launch: launchContext === 'patient' ? { patient } : { user: 'mock-user' },\n      nonce,\n    };\n    const payload = base64url(new TextEncoder().encode(JSON.stringify(payloadObj)));\n    return `${header}.${payload}.`;\n  };\n\n  const onSimulate = async () => {\n    setError(null);\n    setResult(null);\n    const v = validate();\n    if (v) {\n      setError(v);\n      return;\n    }\n    setLoading(true);\n    try {\n      const authorizeUrl = await buildAuthUrl();\n\n      // Try backend simulation if available\n      try {\n        const resp = await fetch('/api/simulate-launch', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            clientId,\n            redirectUri,\n            issuer,\n            authorizeEndpoint: effectiveAuthorizeEndpoint,\n            fhirBase,\n            aud,\n            patient,\n            scopes,\n            launchContext,\n            state,\n            nonce,\n            codeVerifier,\n            codeChallenge,\n          }),\n        });\n        if (resp.ok) {\n          const data = await resp.json();\n          setResult({\n            authorizeUrl,\n            simulatedAccessToken: data.access_token,\n            simulatedIdToken: data.id_token,\n            note: 'From backend simulation',\n          });\n          setLoading(false);\n          return;\n        }\n      } catch {\n        // ignore and fallback\n      }\n\n      // Fallback mock\n      const mockId = generateMockToken();\n      const mockAccess = `mock-access-${randomString(24)}`;\n      setResult({ authorizeUrl, simulatedIdToken: mockId, simulatedAccessToken: mockAccess, note: 'Local mock (no backend)' });\n    } catch (err: any) {\n      setError(String(err?.message || err));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadDemo = () => {\n    setClientId('demo-client');\n    setRedirectUri('http://localhost:5173/callback');\n    setIssuer('https://auth.example');\n    setAuthorizeEndpoint('');\n    setFhirBase('https://fhir.example');\n    setAud('https://fhir.example');\n    setScopes(defaultScopes);\n    setLaunchContext('patient');\n    setPatient('example-patient-id');\n  };\n\n  const reset = () => {\n    setClientId('');\n    setRedirectUri('http://localhost:5173/callback');\n    setIssuer('');\n    setAuthorizeEndpoint('');\n    setFhirBase('');\n    setAud('');\n    setScopes(defaultScopes);\n    setLaunchContext('patient');\n    setPatient('');\n    setCodeVerifier('');\n    setCodeChallenge('');\n    setState('');\n    setNonce('');\n    setResult(null);\n    setError(null);\n  };\n\n  const copy = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n    } catch {}\n  };\n\n  return (\n    <div style={{ border: '1px solid #ddd', padding: 16, borderRadius: 6, maxWidth: 1000 }}>\n      <h3>SMART Launch Simulator</h3>\n      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginBottom: 12 }}>\n        <label>\n          <div>Client ID</div>\n          <input aria-label=\"Client ID\" value={clientId} onChange={(e) => setClientId(e.target.value)} style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>Redirect URI</div>\n          <input aria-label=\"Redirect URI\" value={redirectUri} onChange={(e) => setRedirectUri(e.target.value)} style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>Issuer (OIDC)</div>\n          <input aria-label=\"Issuer\" value={issuer} onChange={(e) => setIssuer(e.target.value)} placeholder=\"https://auth.example\" style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>Authorize Endpoint (override)</div>\n          <input aria-label=\"Authorize Endpoint\" value={authorizeEndpoint} onChange={(e) => setAuthorizeEndpoint(e.target.value)} placeholder=\"https://auth.example/authorize\" style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>FHIR Base URL</div>\n          <input aria-label=\"FHIR Base URL\" value={fhirBase} onChange={(e) => setFhirBase(e.target.value)} placeholder=\"https://fhir.example\" style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>aud (FHIR base)</div>\n          <input aria-label=\"audience\" value={aud} onChange={(e) => setAud(e.target.value)} placeholder=\"https://fhir.example\" style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>Scopes</div>\n          <input aria-label=\"Scopes\" value={scopes} onChange={(e) => setScopes(e.target.value)} style={{ width: '100%' }} />\n        </label>\n        <label>\n          <div>Launch context</div>\n          <select aria-label=\"Launch Context\" value={launchContext} onChange={(e) => setLaunchContext(e.target.value as LaunchContext)} style={{ width: '100%' }}>\n            <option value=\"patient\">patient</option>\n            <option value=\"user\">user</option>\n          </select>\n        </label>\n        <label>\n          <div>Patient ID (if patient)</div>\n          <input aria-label=\"Patient ID\" value={patient} onChange={(e) => setPatient(e.target.value)} disabled={launchContext !== 'patient'} style={{ width: '100%' }} />\n        </label>\n        <label style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n          <input type=\"checkbox\" checked={usePkce} onChange={() => setUsePkce((v) => !v)} /> Use PKCE\n        </label>\n      </div>\n\n      {error && <div role=\"alert\" style={{ color: 'red', marginBottom: 8 }}>{error}</div>}\n\n      <div style={{ display: 'flex', gap: 8, marginBottom: 12, flexWrap: 'wrap' }}>\n        <button onClick={onSimulate} disabled={loading}>\n          {loading ? 'Simulating...' : 'Simulate Launch'}\n        </button>\n        <button onClick={loadDemo}>Load Demo</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n\n      {!!state && (\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginBottom: 12 }}>\n          <div>\n            <strong>State</strong>\n            <div style={{ wordBreak: 'break-all' }}>{state} <button onClick={() => copy(state)}>Copy</button></div>\n          </div>\n          <div>\n            <strong>Nonce</strong>\n            <div style={{ wordBreak: 'break-all' }}>{nonce} <button onClick={() => copy(nonce)}>Copy</button></div>\n          </div>\n          {usePkce && (\n            <>\n              <div>\n                <strong>Code Verifier</strong>\n                <div style={{ wordBreak: 'break-all' }}>{codeVerifier} <button onClick={() => copy(codeVerifier)}>Copy</button></div>\n              </div>\n              <div>\n                <strong>Code Challenge</strong>\n                <div style={{ wordBreak: 'break-all' }}>{codeChallenge} <button onClick={() => copy(codeChallenge)}>Copy</button></div>\n              </div>\n            </>\n          )}\n        </div>\n      )}\n\n      {result && (\n        <div style={{ background: '#fafafa', padding: 12, borderRadius: 4 }}>\n          <div>\n            <strong>Authorize URL</strong>\n            <div style={{ wordBreak: 'break-all' }}>\n              <a href={result.authorizeUrl} target=\"_blank\" rel=\"noreferrer\">\n                {result.authorizeUrl}\n              </a>\n              <button onClick={() => copy(result.authorizeUrl)} style={{ marginLeft: 8 }}>Copy</button>\n            </div>\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <strong>Simulated ID Token</strong>\n            <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>{result.simulatedIdToken}</pre>\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <strong>Simulated Access Token</strong>\n            <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>{result.simulatedAccessToken}</pre>\n          </div>\n\n          {result.note && <div style={{ marginTop: 8, color: '#666' }}>{result.note}</div>}\n        </div>\n      )}\n\n      <details style={{ marginTop: 12 }}>\n        <summary>Help</summary>\n        <ul>\n          <li>aud should match the FHIR base URL for the EHR server.</li>\n          <li>Include launch and patient context as required by SMART.</li>\n          <li>Use PKCE for public clients.</li>\n        </ul>\n      </details>\n    </div>\n  );\n};\n\nexport default SmartAppSimulator;\n",
      "reasoning": "Improves SMART compliance: separates issuer/authorize endpoint, adds PKCE, state, nonce, audience param, safer base64url encoding, better UX controls and copy helpers, while preserving mock/offline capability.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/SmartAppsManager/PermissionMatrix.tsx",
      "search": "",
      "replace": "import React, { useEffect, useMemo, useState } from 'react';\n\n/**\n * PermissionMatrix\n * Simple scope management UI for SMART scopes used by an app registration.\n * Stores a string[] of scopes; backend should translate to policies.\n */\n\ntype Props = {\n  appId?: string;\n  initialScopes?: string[];\n  onSave?: (scopes: string[]) => void;\n};\n\nconst DEFAULT_SCOPES = [\n  'openid',\n  'profile',\n  'offline_access',\n  'launch',\n  'patient/*.read',\n];\n\nconst SUGGESTED_RESOURCES = [\n  'All',\n  'AllergyIntolerance',\n  'Condition',\n  'DiagnosticReport',\n  'Encounter',\n  'Immunization',\n  'MedicationRequest',\n  'Observation',\n  'Patient',\n  'Procedure',\n];\n\nfunction normalizeScope(s: string) {\n  return s.trim().replace(/\\s+/g, ' ');\n}\n\nfunction isValidScope(scope: string) {\n  // Minimal SMART scope syntax validation\n  // Examples: patient/Observation.read, user/*.write, launch/patient\n  if (!scope) return false;\n  if (['openid', 'profile', 'offline_access', 'launch'].includes(scope)) return true;\n  const re = /^(patient|user|system)\\/(\\*|[A-Za-z]+)\\.(read|write|\\*|read\\+write)$/;\n  return re.test(scope);\n}\n\nexport const PermissionMatrix: React.FC<Props> = ({ appId, initialScopes = [], onSave }) => {\n  const [scopes, setScopes] = useState<string[]>(initialScopes.length ? initialScopes : DEFAULT_SCOPES);\n  const [customScope, setCustomScope] = useState('');\n  const [status, setStatus] = useState<string | null>(null);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (initialScopes.length) setScopes(Array.from(new Set(initialScopes.map(normalizeScope))));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialScopes.join('|')]);\n\n  const invalidScopes = useMemo(() => scopes.filter((s) => !isValidScope(s)), [scopes]);\n\n  const addCustomScope = () => {\n    const s = normalizeScope(customScope);\n    if (!s) return;\n    if (!isValidScope(s)) {\n      setStatus(`Invalid scope syntax: ${s}`);\n      return;\n    }\n    setScopes((prev) => Array.from(new Set([...prev, s])));\n    setCustomScope('');\n    setStatus(null);\n  };\n\n  const addSuggested = (prefix: 'patient' | 'user' | 'system', resource: string, access: 'read' | 'write' | 'read+write') => {\n    const res = resource === 'All' ? '*' : resource;\n    const scope = `${prefix}/${res}.${access}`;\n    setScopes((prev) => Array.from(new Set([...prev, scope])));\n  };\n\n  const removeScope = (scopeToRemove: string) => setScopes((s) => s.filter((x) => x !== scopeToRemove));\n\n  const save = async () => {\n    setSaving(true);\n    setStatus(null);\n    try {\n      const uniqueScopes = Array.from(new Set(scopes.map(normalizeScope)));\n      if (appId) {\n        const resp = await fetch(`/api/apps/${encodeURIComponent(appId)}/permissions`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ scopes: uniqueScopes }),\n        });\n        if (!resp.ok) throw new Error(`Save failed: ${resp.status}`);\n      }\n      setStatus('Saved');\n      onSave?.(Array.from(new Set(scopes)));\n    } catch (err: any) {\n      setStatus(String(err?.message || err));\n    } finally {\n      setSaving(false);\n      setTimeout(() => setStatus(null), 4000);\n    }\n  };\n\n  return (\n    <div style={{ border: '1px solid #eee', padding: 12, borderRadius: 6, maxWidth: 1000 }}>\n      <h3>Permission Matrix</h3>\n\n      <div style={{ display: 'grid', gap: 8, marginBottom: 12 }}>\n        <div>\n          <strong>Current Scopes</strong>\n          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap', marginTop: 8 }}>\n            {scopes.map((s) => (\n              <div key={s} style={{ background: '#f5f5f5', padding: '6px 8px', borderRadius: 6, display: 'flex', alignItems: 'center', gap: 8 }}>\n                <span style={{ fontFamily: 'monospace' }}>{s}</span>\n                <button onClick={() => removeScope(s)} aria-label={`Remove ${s}`}>\n                  \u00d7\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <strong>Add Scope</strong>\n          <div style={{ display: 'flex', gap: 8, marginTop: 8, flexWrap: 'wrap' }}>\n            <input\n              value={customScope}\n              onChange={(e) => setCustomScope(e.target.value)}\n              placeholder=\"e.g. patient/Observation.read\"\n              style={{ flex: 1, minWidth: 260 }}\n            />\n            <button onClick={addCustomScope}>Add</button>\n          </div>\n          {status && <div style={{ marginTop: 6, color: status.startsWith('Invalid') ? 'crimson' : '#333' }}>{status}</div>}\n        </div>\n\n        <details>\n          <summary>Quick Add</summary>\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8, marginTop: 8 }}>\n            {(['patient', 'user'] as const).map((who) => (\n              <div key={who} style={{ border: '1px solid #f0f0f0', padding: 8, borderRadius: 4 }}>\n                <div style={{ fontWeight: 600, marginBottom: 6 }}>{who}</div>\n                <div style={{ display: 'flex', gap: 6, flexWrap: 'wrap' }}>\n                  {SUGGESTED_RESOURCES.map((res) => (\n                    <div key={`${who}-${res}`} style={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n                      <span style={{ fontFamily: 'monospace' }}>{res}</span>\n                      <button onClick={() => addSuggested(who, res, 'read')}>.read</button>\n                      <button onClick={() => addSuggested(who, res, 'write')}>.write</button>\n                      <button onClick={() => addSuggested(who, res, 'read+write')}>.read+write</button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </details>\n      </div>\n\n      <div>\n        <button onClick={save} disabled={saving || invalidScopes.length > 0}>\n          {saving ? 'Saving...' : 'Save Permissions'}\n        </button>\n        {invalidScopes.length > 0 && (\n          <span style={{ marginLeft: 12, color: 'crimson' }}>Invalid scopes: {invalidScopes.join(', ')}</span>\n        )}\n      </div>\n\n      <details style={{ marginTop: 12 }}>\n        <summary>Help</summary>\n        <div style={{ padding: 8 }}>\n          <p>Use SMART scopes like patient/Observation.read, user/*.write, offline_access. The backend should enforce policies.</p>\n          <p>For refresh tokens include offline_access. For patient context, prefer patient/Resource.access scopes.</p>\n        </div>\n      </details>\n    </div>\n  );\n};\n\nexport default PermissionMatrix;\n",
      "reasoning": "Keeps scope-centric management simple, adds syntax validation, quick-add helpers, deduping, UX feedback, and integrates with the expected backend endpoint without assumptions.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/SmartAppsManager/FHIRMetadataValidator.tsx",
      "search": "",
      "replace": "import React, { useState } from 'react';\n\n/**\n * FHIRMetadataValidator\n * Fetches /metadata and optionally .well-known/smart-configuration, runs SMART/OAuth checks.\n */\n\ntype Check = { id: string; ok: boolean; message: string };\n\ntype ValidationResult = {\n  ok: boolean;\n  checks: Check[];\n  raw?: any;\n  smartConfig?: any;\n};\n\nasync function fetchJson(url: string) {\n  const resp = await fetch(url, { headers: { Accept: 'application/fhir+json, application/json' } });\n  if (!resp.ok) throw new Error(`${resp.status} ${resp.statusText}`);\n  return resp.json();\n}\n\nexport const FHIRMetadataValidator: React.FC = () => {\n  const [base, setBase] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<ValidationResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const run = async () => {\n    setError(null);\n    setResult(null);\n    if (!base) return setError('FHIR base URL required');\n    setLoading(true);\n    try {\n      const baseUrl = base.replace(/\\/$/, '');\n      const metaUrl = baseUrl + '/metadata';\n      const json = await fetchJson(metaUrl);\n\n      const checks: Check[] = [];\n      checks.push({ id: 'resourceType', ok: json.resourceType === 'CapabilityStatement', message: `resourceType=${json.resourceType}` });\n\n      const rest = Array.isArray(json.rest) ? json.rest : [];\n      const restServer = rest.find((r: any) => r.mode === 'server') || rest[0];\n      const security = restServer?.security;\n      checks.push({ id: 'security', ok: !!security, message: security ? 'security present' : 'security missing' });\n\n      // SMART OAuth URIs extension per spec https://www.hl7.org/fhir/smart-app-launch/conformance.html\n      let oauthUrisExt: any | undefined;\n      if (security?.extension) {\n        oauthUrisExt = security.extension.find((ext: any) =>\n          typeof ext?.url === 'string' && /smart-configuration|oauth-uris/i.test(ext.url)\n        );\n      }\n      checks.push({ id: 'oauth-uris-ext', ok: !!oauthUrisExt, message: oauthUrisExt ? `extension url=${oauthUrisExt.url}` : 'oauth-uris extension not found' });\n\n      const endpoints: Record<string, string> = {};\n      if (oauthUrisExt?.extension && Array.isArray(oauthUrisExt.extension)) {\n        for (const sub of oauthUrisExt.extension) {\n          if (sub.url && (sub.valueUri || sub.valueUrl)) {\n            endpoints[sub.url] = sub.valueUri || sub.valueUrl;\n          }\n        }\n      }\n\n      const hasAuthorize = !!Object.keys(endpoints).find((k) => /authorize/i.test(k));\n      const hasToken = !!Object.keys(endpoints).find((k) => /token/i.test(k));\n      checks.push({ id: 'authorize-endpoint', ok: hasAuthorize, message: hasAuthorize ? `found (${Object.keys(endpoints).filter((k) => /authorize/i.test(k)).map((k) => endpoints[k]).join(', ')})` : 'authorize endpoint missing' });\n      checks.push({ id: 'token-endpoint', ok: hasToken, message: hasToken ? `found (${Object.keys(endpoints).filter((k) => /token/i.test(k)).map((k) => endpoints[k]).join(', ')})` : 'token endpoint missing' });\n\n      // Try .well-known/smart-configuration if same origin; may fail due to CORS\n      let smartConfig: any | undefined;\n      try {\n        const smartWellKnown = baseUrl + '/.well-known/smart-configuration';\n        smartConfig = await fetchJson(smartWellKnown);\n        checks.push({ id: 'smart-well-known', ok: true, message: 'smart-configuration fetched' });\n        if (smartConfig.authorization_endpoint) {\n          checks.push({ id: 'smart-authorize', ok: true, message: `authorization_endpoint=${smartConfig.authorization_endpoint}` });\n        }\n        if (smartConfig.token_endpoint) {\n          checks.push({ id: 'smart-token', ok: true, message: `token_endpoint=${smartConfig.token_endpoint}` });\n        }\n        if (Array.isArray(smartConfig.grant_types_supported)) {\n          const supportsAuthCode = smartConfig.grant_types_supported.includes('authorization_code');\n          checks.push({ id: 'grant-types', ok: supportsAuthCode, message: supportsAuthCode ? 'authorization_code supported' : 'authorization_code not listed' });\n        }\n      } catch (e: any) {\n        checks.push({ id: 'smart-well-known', ok: false, message: `smart-configuration not available (${e?.message || 'fetch failed'})` });\n      }\n\n      const ok = checks.every((c) => c.ok);\n      setResult({ ok, checks, raw: json, smartConfig });\n    } catch (err: any) {\n      setError(String(err?.message || err));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ border: '1px solid #eee', padding: 12, borderRadius: 6, maxWidth: 1000 }}>\n      <h3>FHIR Metadata Validator</h3>\n      <div style={{ display: 'flex', gap: 8, marginBottom: 8 }}>\n        <input value={base} onChange={(e) => setBase(e.target.value)} placeholder=\"https://fhirserver.example\" style={{ width: '70%' }} />\n        <button onClick={run} disabled={loading}>\n          {loading ? 'Checking...' : 'Fetch /metadata'}\n        </button>\n      </div>\n      {error && <div role=\"alert\" style={{ color: 'red' }}>{error}</div>}\n      {result && (\n        <div style={{ marginTop: 8 }}>\n          <div style={{ fontWeight: 'bold' }}>Summary: {result.ok ? 'Looks good' : 'Issues found'}</div>\n          <ul>\n            {result.checks.map((c) => (\n              <li key={c.id} style={{ color: c.ok ? 'green' : 'crimson' }}>\n                {c.id}: {c.message}\n              </li>\n            ))}\n          </ul>\n          <details>\n            <summary>Raw capability statement</summary>\n            <pre style={{ maxHeight: 400, overflow: 'auto' }}>{JSON.stringify(result.raw, null, 2)}</pre>\n          </details>\n          {result.smartConfig && (\n            <details>\n              <summary>SMART configuration</summary>\n              <pre style={{ maxHeight: 400, overflow: 'auto' }}>{JSON.stringify(result.smartConfig, null, 2)}</pre>\n            </details>\n          )}\n        </div>\n      )}\n\n      <div style={{ marginTop: 8, color: '#666' }}>\n        Tip: If fetching fails in browser, the server may not allow CORS for your origin. Try a proxy or server-side check.\n      </div>\n    </div>\n  );\n};\n\nexport default FHIRMetadataValidator;\n",
      "reasoning": "Enhances SMART-specific validations: capability statement security extension parsing, endpoints presence checks, and optional .well-known discovery. Robust error handling and user feedback are included.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/SmartAppsManager/index.ts",
      "search": "",
      "replace": "export { default as SmartAppSimulator } from './SmartAppSimulator';\nexport { default as PermissionMatrix } from './PermissionMatrix';\nexport { default as FHIRMetadataValidator } from './FHIRMetadataValidator';\n\nexport { SmartAppSimulator } from './SmartAppSimulator';\nexport { PermissionMatrix } from './PermissionMatrix';\nexport { FHIRMetadataValidator } from './FHIRMetadataValidator';\n",
      "reasoning": "Keeps both default and named exports for flexibility. Matches consumer import patterns easily.",
      "confidence": "high"
    }
  ]
}
